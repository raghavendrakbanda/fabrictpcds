<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Case SynapseWorkspace Dedicated" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <stringProp name="dataSource">synapsePool</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <boolProp name="keepAlive">true</boolProp>
        <stringProp name="connectionAge">5000</stringProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="dbUrl">jdbc:sqlserver://synapseworkspacebrmyers-ondemand.sql.azuresynapse.net:1433;database=TPCDSDW;</stringProp>
        <stringProp name="driver">com.microsoft.sqlserver.jdbc.SQLServerDriver</stringProp>
        <stringProp name="username">LoadingUser</stringProp>
        <stringProp name="password">MsftDemo202#</stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Query Request" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>false</time>
            <latency>true</latency>
            <timestamp>false</timestamp>
            <success>true</success>
            <label>true</label>
            <code>false</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>true</samplerData>
            <xml>true</xml>
            <fieldNames>false</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Query Response" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>false</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>true</responseData>
            <samplerData>false</samplerData>
            <xml>true</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group Execute Queries" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">0</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q1" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q1.sql--
 WITH customer_total_return AS
  (SELECT sr_customer_sk AS ctr_customer_sk,
          sr_store_sk AS ctr_store_sk,
          sum(sr_return_amt) AS ctr_total_return
   FROM TPCDS.store_returns,
        TPCDS.date_dim
   WHERE sr_returned_date_sk = d_date_sk
     AND d_year = 2000
   GROUP BY sr_customer_sk,
            sr_store_sk)
SELECT TOP 100 c_customer_id
FROM customer_total_return ctr1,
     TPCDS.store,
     TPCDS.customer
WHERE ctr1.ctr_total_return &gt;
    (SELECT avg(ctr_total_return)*1.2
     FROM customer_total_return ctr2
     WHERE ctr1.ctr_store_sk = ctr2.ctr_store_sk)
  AND s_store_sk = ctr1.ctr_store_sk
  AND s_state = &apos;TN&apos;
  AND ctr1.ctr_customer_sk = c_customer_sk
ORDER BY c_customer_id
OPTION (LABEL = &apos;q1&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q2" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q2.sql--
 WITH wscs AS
  (SELECT sold_date_sk,
          sales_price
   FROM
     (SELECT ws_sold_date_sk sold_date_sk,
             ws_ext_sales_price sales_price
      FROM TPCDS.web_sales
      UNION ALL SELECT cs_sold_date_sk sold_date_sk,
                       cs_ext_sales_price sales_price
      FROM TPCDS.catalog_sales) x),
      wswscs AS
  (SELECT d_week_seq,
          sum(CASE
                  WHEN (d_day_name=&apos;Sunday&apos;) THEN sales_price
                  ELSE NULL
              END) sun_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Monday&apos;) THEN sales_price
                  ELSE NULL
              END) mon_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Tuesday&apos;) THEN sales_price
                  ELSE NULL
              END) tue_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Wednesday&apos;) THEN sales_price
                  ELSE NULL
              END) wed_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Thursday&apos;) THEN sales_price
                  ELSE NULL
              END) thu_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Friday&apos;) THEN sales_price
                  ELSE NULL
              END) fri_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Saturday&apos;) THEN sales_price
                  ELSE NULL
              END) sat_sales
   FROM wscs,
        TPCDS.date_dim
   WHERE d_date_sk = sold_date_sk
   GROUP BY d_week_seq)
SELECT d_week_seq1 ,
       round(sun_sales1/sun_sales2, 2) ,
       round(mon_sales1/mon_sales2, 2) ,
       round(tue_sales1/tue_sales2, 2) ,
       round(wed_sales1/wed_sales2, 2) ,
       round(thu_sales1/thu_sales2, 2) ,
       round(fri_sales1/fri_sales2, 2) ,
       round(sat_sales1/sat_sales2, 2)
FROM
  (SELECT wswscs.d_week_seq d_week_seq1 ,
          sun_sales sun_sales1 ,
          mon_sales mon_sales1 ,
          tue_sales tue_sales1 ,
          wed_sales wed_sales1 ,
          thu_sales thu_sales1 ,
          fri_sales fri_sales1 ,
          sat_sales sat_sales1
   FROM wswscs,
        TPCDS.date_dim
   WHERE TPCDS.date_dim.d_week_seq = wswscs.d_week_seq
     AND d_year = 2001) y,

  (SELECT wswscs.d_week_seq d_week_seq2 ,
          sun_sales sun_sales2 ,
          mon_sales mon_sales2 ,
          tue_sales tue_sales2 ,
          wed_sales wed_sales2 ,
          thu_sales thu_sales2 ,
          fri_sales fri_sales2 ,
          sat_sales sat_sales2
   FROM wswscs,
        TPCDS.date_dim
   WHERE TPCDS.date_dim.d_week_seq = wswscs.d_week_seq
     AND d_year = 2001 + 1) z
WHERE d_week_seq1=d_week_seq2-53
ORDER BY d_week_seq1
OPTION (LABEL = &apos;q2&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q3" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q3.sql--

SELECT TOP 100 dt.d_year,
       TPCDS.item.i_brand_id brand_id,
       TPCDS.item.i_brand brand,
       SUM(ss_ext_sales_price) sum_agg
FROM TPCDS.date_dim dt,
     TPCDS.store_sales,
     TPCDS.item
WHERE dt.d_date_sk = TPCDS.store_sales.ss_sold_date_sk
  AND TPCDS.store_sales.ss_item_sk = TPCDS.item.i_item_sk
  AND TPCDS.item.i_manufact_id = 128
  AND dt.d_moy=11
GROUP BY dt.d_year,
         TPCDS.item.i_brand,
         TPCDS.item.i_brand_id
ORDER BY dt.d_year,
         sum_agg DESC,
         brand_id
OPTION (LABEL = &apos;q3&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q4" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q4.sql--
 WITH year_total AS
  (SELECT c_customer_id customer_id,
          c_first_name customer_first_name,
          c_last_name customer_last_name,
          c_preferred_cust_flag customer_preferred_cust_flag,
          c_birth_country customer_birth_country,
          c_login customer_login,
          c_email_address customer_email_address,
          d_year dyear,
          sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total,
          &apos;s&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.store_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ss_customer_sk
     AND ss_sold_date_sk = d_date_sk
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            c_preferred_cust_flag,
            c_birth_country,
            c_login,
            c_email_address,
            d_year
   UNION ALL SELECT c_customer_id customer_id,
                    c_first_name customer_first_name,
                    c_last_name customer_last_name,
                    c_preferred_cust_flag customer_preferred_cust_flag,
                    c_birth_country customer_birth_country,
                    c_login customer_login,
                    c_email_address customer_email_address,
                    d_year dyear,
                    sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2)) year_total,
                    &apos;c&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.catalog_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = cs_bill_customer_sk
     AND cs_sold_date_sk = d_date_sk
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            c_preferred_cust_flag,
            c_birth_country,
            c_login,
            c_email_address,
            d_year
   UNION ALL SELECT c_customer_id customer_id ,
                    c_first_name customer_first_name ,
                    c_last_name customer_last_name ,
                    c_preferred_cust_flag customer_preferred_cust_flag ,
                    c_birth_country customer_birth_country ,
                    c_login customer_login ,
                    c_email_address customer_email_address ,
                    d_year dyear ,
                    sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2)) year_total ,
                    &apos;w&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.web_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ws_bill_customer_sk
     AND ws_sold_date_sk = d_date_sk
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            c_preferred_cust_flag,
            c_birth_country,
            c_login,
            c_email_address,
            d_year)
SELECT TOP 100 
		t_s_secyear.customer_id,
       t_s_secyear.customer_first_name,
       t_s_secyear.customer_last_name,
       t_s_secyear.customer_preferred_cust_flag
FROM year_total t_s_firstyear,
     year_total t_s_secyear,
     year_total t_c_firstyear,
     year_total t_c_secyear,
     year_total t_w_firstyear,
     year_total t_w_secyear
WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id
  AND t_s_firstyear.customer_id = t_c_secyear.customer_id
  AND t_s_firstyear.customer_id = t_c_firstyear.customer_id
  AND t_s_firstyear.customer_id = t_w_firstyear.customer_id
  AND t_s_firstyear.customer_id = t_w_secyear.customer_id
  AND t_s_firstyear.sale_type = &apos;s&apos;
  AND t_c_firstyear.sale_type = &apos;c&apos;
  AND t_w_firstyear.sale_type = &apos;w&apos;
  AND t_s_secyear.sale_type = &apos;s&apos;
  AND t_c_secyear.sale_type = &apos;c&apos;
  AND t_w_secyear.sale_type = &apos;w&apos;
  AND t_s_firstyear.dyear = 2001
  AND t_s_secyear.dyear = 2001+1
  AND t_c_firstyear.dyear = 2001
  AND t_c_secyear.dyear = 2001+1
  AND t_w_firstyear.dyear = 2001
  AND t_w_secyear.dyear = 2001+1
  AND t_s_firstyear.year_total &gt; 0
  AND t_c_firstyear.year_total &gt; 0
  AND t_w_firstyear.year_total &gt; 0
  AND CASE
          WHEN t_c_firstyear.year_total &gt; 0 THEN t_c_secyear.year_total / t_c_firstyear.year_total
          ELSE NULL
      END &gt; CASE
                WHEN t_s_firstyear.year_total &gt; 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total
                ELSE NULL
            END
  AND CASE
          WHEN t_c_firstyear.year_total &gt; 0 THEN t_c_secyear.year_total / t_c_firstyear.year_total
          ELSE NULL
      END &gt; CASE
                WHEN t_w_firstyear.year_total &gt; 0 THEN t_w_secyear.year_total / t_w_firstyear.year_total
                ELSE NULL
            END
ORDER BY t_s_secyear.customer_id,
         t_s_secyear.customer_first_name,
         t_s_secyear.customer_last_name,
         t_s_secyear.customer_preferred_cust_flag
OPTION (LABEL = &apos;q4&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q5" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q5.sql--
 WITH ssr AS
  (SELECT s_store_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS RETURNS,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT ss_store_sk AS store_sk,
             ss_sold_date_sk AS date_sk,
             ss_ext_sales_price AS sales_price,
             ss_net_profit AS profit,
             cast(0 AS decimal(7, 2)) AS return_amt,
             cast(0 AS decimal(7, 2)) AS net_loss
      FROM TPCDS.store_sales
      UNION ALL SELECT sr_store_sk AS store_sk,
                       sr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7, 2)) AS sales_price,
                       cast(0 AS decimal(7, 2)) AS profit,
                       sr_return_amt AS return_amt,
                       sr_net_loss AS net_loss
      FROM TPCDS.store_returns) salesreturns,
        TPCDS.date_dim,
        TPCDS.store
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 14, (cast(&apos;2000-08-23&apos; AS date))))
     AND store_sk = s_store_sk
   GROUP BY s_store_id),
      csr AS
  (SELECT cp_catalog_page_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS RETURNS,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT cs_catalog_page_sk AS page_sk,
             cs_sold_date_sk AS date_sk,
             cs_ext_sales_price AS sales_price,
             cs_net_profit AS profit,
             cast(0 AS decimal(7, 2)) AS return_amt,
             cast(0 AS decimal(7, 2)) AS net_loss
      FROM TPCDS.catalog_sales
      UNION ALL SELECT cr_catalog_page_sk AS page_sk,
                       cr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7, 2)) AS sales_price,
                       cast(0 AS decimal(7, 2)) AS profit,
                       cr_return_amount AS return_amt,
                       cr_net_loss AS net_loss
      FROM TPCDS.catalog_returns) salesreturns,
        TPCDS.date_dim,
        TPCDS.catalog_page
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 14, (cast(&apos;2000-08-23&apos; AS date))))
     AND page_sk = cp_catalog_page_sk
   GROUP BY cp_catalog_page_id) ,
      wsr AS
  (SELECT web_site_id,
          sum(sales_price) AS sales,
          sum(profit) AS profit,
          sum(return_amt) AS RETURNS,
          sum(net_loss) AS profit_loss
   FROM
     (SELECT ws_web_site_sk AS wsr_web_site_sk,
             ws_sold_date_sk AS date_sk,
             ws_ext_sales_price AS sales_price,
             ws_net_profit AS profit,
             cast(0 AS decimal(7, 2)) AS return_amt,
             cast(0 AS decimal(7, 2)) AS net_loss
      FROM TPCDS.web_sales
      UNION ALL SELECT ws_web_site_sk AS wsr_web_site_sk,
                       wr_returned_date_sk AS date_sk,
                       cast(0 AS decimal(7, 2)) AS sales_price,
                       cast(0 AS decimal(7, 2)) AS profit,
                       wr_return_amt AS return_amt,
                       wr_net_loss AS net_loss
      FROM TPCDS.web_returns
      LEFT  OUTER JOIN TPCDS.web_sales ON (wr_item_sk = ws_item_sk
                                           AND wr_order_number = ws_order_number)) salesreturns,
        TPCDS.date_dim,
        TPCDS.web_site
   WHERE date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 14, (cast(&apos;2000-08-23&apos; AS date))))
     AND wsr_web_site_sk = web_site_sk
   GROUP BY web_site_id)
SELECT TOP 100 channel,
       id,
       sum(sales) AS sales,
       sum(RETURNS) AS RETURNS,
       sum(profit) AS profit
FROM
  (SELECT &apos;store channel&apos; AS channel,
          concat(&apos;store&apos;, s_store_id) AS id,
          sales,
          RETURNS,
          (profit - profit_loss) AS profit
   FROM ssr
   UNION ALL SELECT &apos;catalog channel&apos; AS channel,
                    concat(&apos;catalog_page&apos;, cp_catalog_page_id) AS id,
                    sales,
                    RETURNS,
                    (profit - profit_loss) AS profit
   FROM csr
   UNION ALL SELECT &apos;web channel&apos; AS channel,
                    concat(&apos;web_site&apos;, web_site_id) AS id,
                    sales,
                    RETURNS,
                    (profit - profit_loss) AS profit
   FROM wsr) x
GROUP BY ROLLUP (channel,
                 id)
ORDER BY channel,
         id
OPTION (LABEL = &apos;q5&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q6" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q6.sql--

SELECT TOP 100 state,
       cnt
FROM
  (SELECT a.ca_state state,
          count(*) cnt
   FROM TPCDS.customer_address a,
        TPCDS.customer c,
        TPCDS.store_sales s,
        TPCDS.date_dim d,
        TPCDS.item i
   WHERE a.ca_address_sk = c.c_current_addr_sk
     AND c.c_customer_sk = s.ss_customer_sk
     AND s.ss_sold_date_sk = d.d_date_sk
     AND s.ss_item_sk = i.i_item_sk
     AND d.d_month_seq =
       (SELECT DISTINCT (d_month_seq)
        FROM TPCDS.date_dim
        WHERE d_year = 2001
          AND d_moy = 1)
     AND i.i_current_price &gt; 1.2 *
       (SELECT avg(j.i_current_price)
        FROM TPCDS.item j
        WHERE j.i_category = i.i_category)
   GROUP BY a.ca_state) x
WHERE cnt &gt;= 10
ORDER BY cnt
OPTION (LABEL = &apos;q6&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q7" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q7.sql--

SELECT TOP 100 i_item_id,
       avg(ss_quantity) agg1,
       avg(ss_list_price) agg2,
       avg(ss_coupon_amt) agg3,
       avg(ss_sales_price) agg4
FROM TPCDS.store_sales,
     TPCDS.customer_demographics,
     TPCDS.date_dim,
     TPCDS.item,
     TPCDS.promotion
WHERE ss_sold_date_sk = d_date_sk
  AND ss_item_sk = i_item_sk
  AND ss_cdemo_sk = cd_demo_sk
  AND ss_promo_sk = p_promo_sk
  AND cd_gender = &apos;M&apos;
  AND cd_marital_status = &apos;S&apos;
  AND cd_education_status = &apos;College&apos;
  AND (p_channel_email = &apos;N&apos;
       OR p_channel_event = &apos;N&apos;)
  AND d_year = 2000
GROUP BY i_item_id
ORDER BY i_item_id
OPTION (LABEL = &apos;q7&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q8" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q8.sql--

SELECT TOP 100 s_store_name,
       sum(ss_net_profit)
FROM TPCDS.store_sales,
     TPCDS.date_dim,
     TPCDS.store,

  (SELECT ca_zip
   FROM (
           (SELECT SUBSTRING(ca_zip, 1, 5) ca_zip
            FROM TPCDS.customer_address
            WHERE SUBSTRING(ca_zip, 1, 5) IN (&apos;24128&apos;,
                                           &apos;76232&apos;,
                                           &apos;65084&apos;,
                                           &apos;87816&apos;,
                                           &apos;83926&apos;,
                                           &apos;77556&apos;,
                                           &apos;20548&apos;,
                                           &apos;26231&apos;,
                                           &apos;43848&apos;,
                                           &apos;15126&apos;,
                                           &apos;91137&apos;,
                                           &apos;61265&apos;,
                                           &apos;98294&apos;,
                                           &apos;25782&apos;,
                                           &apos;17920&apos;,
                                           &apos;18426&apos;,
                                           &apos;98235&apos;,
                                           &apos;40081&apos;,
                                           &apos;84093&apos;,
                                           &apos;28577&apos;,
                                           &apos;55565&apos;,
                                           &apos;17183&apos;,
                                           &apos;54601&apos;,
                                           &apos;67897&apos;,
                                           &apos;22752&apos;,
                                           &apos;86284&apos;,
                                           &apos;18376&apos;,
                                           &apos;38607&apos;,
                                           &apos;45200&apos;,
                                           &apos;21756&apos;,
                                           &apos;29741&apos;,
                                           &apos;96765&apos;,
                                           &apos;23932&apos;,
                                           &apos;89360&apos;,
                                           &apos;29839&apos;,
                                           &apos;25989&apos;,
                                           &apos;28898&apos;,
                                           &apos;91068&apos;,
                                           &apos;72550&apos;,
                                           &apos;10390&apos;,
                                           &apos;18845&apos;,
                                           &apos;47770&apos;,
                                           &apos;82636&apos;,
                                           &apos;41367&apos;,
                                           &apos;76638&apos;,
                                           &apos;86198&apos;,
                                           &apos;81312&apos;,
                                           &apos;37126&apos;,
                                           &apos;39192&apos;,
                                           &apos;88424&apos;,
                                           &apos;72175&apos;,
                                           &apos;81426&apos;,
                                           &apos;53672&apos;,
                                           &apos;10445&apos;,
                                           &apos;42666&apos;,
                                           &apos;66864&apos;,
                                           &apos;66708&apos;,
                                           &apos;41248&apos;,
                                           &apos;48583&apos;,
                                           &apos;82276&apos;,
                                           &apos;18842&apos;,
                                           &apos;78890&apos;,
                                           &apos;49448&apos;,
                                           &apos;14089&apos;,
                                           &apos;38122&apos;,
                                           &apos;34425&apos;,
                                           &apos;79077&apos;,
                                           &apos;19849&apos;,
                                           &apos;43285&apos;,
                                           &apos;39861&apos;,
                                           &apos;66162&apos;,
                                           &apos;77610&apos;,
                                           &apos;13695&apos;,
                                           &apos;99543&apos;,
                                           &apos;83444&apos;,
                                           &apos;83041&apos;,
                                           &apos;12305&apos;,
                                           &apos;57665&apos;,
                                           &apos;68341&apos;,
                                           &apos;25003&apos;,
                                           &apos;57834&apos;,
                                           &apos;62878&apos;,
                                           &apos;49130&apos;,
                                           &apos;81096&apos;,
                                           &apos;18840&apos;,
                                           &apos;27700&apos;,
                                           &apos;23470&apos;,
                                           &apos;50412&apos;,
                                           &apos;21195&apos;,
                                           &apos;16021&apos;,
                                           &apos;76107&apos;,
                                           &apos;71954&apos;,
                                           &apos;68309&apos;,
                                           &apos;18119&apos;,
                                           &apos;98359&apos;,
                                           &apos;64544&apos;,
                                           &apos;10336&apos;,
                                           &apos;86379&apos;,
                                           &apos;27068&apos;,
                                           &apos;39736&apos;,
                                           &apos;98569&apos;,
                                           &apos;28915&apos;,
                                           &apos;24206&apos;,
                                           &apos;56529&apos;,
                                           &apos;57647&apos;,
                                           &apos;54917&apos;,
                                           &apos;42961&apos;,
                                           &apos;91110&apos;,
                                           &apos;63981&apos;,
                                           &apos;14922&apos;,
                                           &apos;36420&apos;,
                                           &apos;23006&apos;,
                                           &apos;67467&apos;,
                                           &apos;32754&apos;,
                                           &apos;30903&apos;,
                                           &apos;20260&apos;,
                                           &apos;31671&apos;,
                                           &apos;51798&apos;,
                                           &apos;72325&apos;,
                                           &apos;85816&apos;,
                                           &apos;68621&apos;,
                                           &apos;13955&apos;,
                                           &apos;36446&apos;,
                                           &apos;41766&apos;,
                                           &apos;68806&apos;,
                                           &apos;16725&apos;,
                                           &apos;15146&apos;,
                                           &apos;22744&apos;,
                                           &apos;35850&apos;,
                                           &apos;88086&apos;,
                                           &apos;51649&apos;,
                                           &apos;18270&apos;,
                                           &apos;52867&apos;,
                                           &apos;39972&apos;,
                                           &apos;96976&apos;,
                                           &apos;63792&apos;,
                                           &apos;11376&apos;,
                                           &apos;94898&apos;,
                                           &apos;13595&apos;,
                                           &apos;10516&apos;,
                                           &apos;90225&apos;,
                                           &apos;58943&apos;,
                                           &apos;39371&apos;,
                                           &apos;94945&apos;,
                                           &apos;28587&apos;,
                                           &apos;96576&apos;,
                                           &apos;57855&apos;,
                                           &apos;28488&apos;,
                                           &apos;26105&apos;,
                                           &apos;83933&apos;,
                                           &apos;25858&apos;,
                                           &apos;34322&apos;,
                                           &apos;44438&apos;,
                                           &apos;73171&apos;,
                                           &apos;30122&apos;,
                                           &apos;34102&apos;,
                                           &apos;22685&apos;,
                                           &apos;71256&apos;,
                                           &apos;78451&apos;,
                                           &apos;54364&apos;,
                                           &apos;13354&apos;,
                                           &apos;45375&apos;,
                                           &apos;40558&apos;,
                                           &apos;56458&apos;,
                                           &apos;28286&apos;,
                                           &apos;45266&apos;,
                                           &apos;47305&apos;,
                                           &apos;69399&apos;,
                                           &apos;83921&apos;,
                                           &apos;26233&apos;,
                                           &apos;11101&apos;,
                                           &apos;15371&apos;,
                                           &apos;69913&apos;,
                                           &apos;35942&apos;,
                                           &apos;15882&apos;,
                                           &apos;25631&apos;,
                                           &apos;24610&apos;,
                                           &apos;44165&apos;,
                                           &apos;99076&apos;,
                                           &apos;33786&apos;,
                                           &apos;70738&apos;,
                                           &apos;26653&apos;,
                                           &apos;14328&apos;,
                                           &apos;72305&apos;,
                                           &apos;62496&apos;,
                                           &apos;22152&apos;,
                                           &apos;10144&apos;,
                                           &apos;64147&apos;,
                                           &apos;48425&apos;,
                                           &apos;14663&apos;,
                                           &apos;21076&apos;,
                                           &apos;18799&apos;,
                                           &apos;30450&apos;,
                                           &apos;63089&apos;,
                                           &apos;81019&apos;,
                                           &apos;68893&apos;,
                                           &apos;24996&apos;,
                                           &apos;51200&apos;,
                                           &apos;51211&apos;,
                                           &apos;45692&apos;,
                                           &apos;92712&apos;,
                                           &apos;70466&apos;,
                                           &apos;79994&apos;,
                                           &apos;22437&apos;,
                                           &apos;25280&apos;,
                                           &apos;38935&apos;,
                                           &apos;71791&apos;,
                                           &apos;73134&apos;,
                                           &apos;56571&apos;,
                                           &apos;14060&apos;,
                                           &apos;19505&apos;,
                                           &apos;72425&apos;,
                                           &apos;56575&apos;,
                                           &apos;74351&apos;,
                                           &apos;68786&apos;,
                                           &apos;51650&apos;,
                                           &apos;20004&apos;,
                                           &apos;18383&apos;,
                                           &apos;76614&apos;,
                                           &apos;11634&apos;,
                                           &apos;18906&apos;,
                                           &apos;15765&apos;,
                                           &apos;41368&apos;,
                                           &apos;73241&apos;,
                                           &apos;76698&apos;,
                                           &apos;78567&apos;,
                                           &apos;97189&apos;,
                                           &apos;28545&apos;,
                                           &apos;76231&apos;,
                                           &apos;75691&apos;,
                                           &apos;22246&apos;,
                                           &apos;51061&apos;,
                                           &apos;90578&apos;,
                                           &apos;56691&apos;,
                                           &apos;68014&apos;,
                                           &apos;51103&apos;,
                                           &apos;94167&apos;,
                                           &apos;57047&apos;,
                                           &apos;14867&apos;,
                                           &apos;73520&apos;,
                                           &apos;15734&apos;,
                                           &apos;63435&apos;,
                                           &apos;25733&apos;,
                                           &apos;35474&apos;,
                                           &apos;24676&apos;,
                                           &apos;94627&apos;,
                                           &apos;53535&apos;,
                                           &apos;17879&apos;,
                                           &apos;15559&apos;,
                                           &apos;53268&apos;,
                                           &apos;59166&apos;,
                                           &apos;11928&apos;,
                                           &apos;59402&apos;,
                                           &apos;33282&apos;,
                                           &apos;45721&apos;,
                                           &apos;43933&apos;,
                                           &apos;68101&apos;,
                                           &apos;33515&apos;,
                                           &apos;36634&apos;,
                                           &apos;71286&apos;,
                                           &apos;19736&apos;,
                                           &apos;58058&apos;,
                                           &apos;55253&apos;,
                                           &apos;67473&apos;,
                                           &apos;41918&apos;,
                                           &apos;19515&apos;,
                                           &apos;36495&apos;,
                                           &apos;19430&apos;,
                                           &apos;22351&apos;,
                                           &apos;77191&apos;,
                                           &apos;91393&apos;,
                                           &apos;49156&apos;,
                                           &apos;50298&apos;,
                                           &apos;87501&apos;,
                                           &apos;18652&apos;,
                                           &apos;53179&apos;,
                                           &apos;18767&apos;,
                                           &apos;63193&apos;,
                                           &apos;23968&apos;,
                                           &apos;65164&apos;,
                                           &apos;68880&apos;,
                                           &apos;21286&apos;,
                                           &apos;72823&apos;,
                                           &apos;58470&apos;,
                                           &apos;67301&apos;,
                                           &apos;13394&apos;,
                                           &apos;31016&apos;,
                                           &apos;70372&apos;,
                                           &apos;67030&apos;,
                                           &apos;40604&apos;,
                                           &apos;24317&apos;,
                                           &apos;45748&apos;,
                                           &apos;39127&apos;,
                                           &apos;26065&apos;,
                                           &apos;77721&apos;,
                                           &apos;31029&apos;,
                                           &apos;31880&apos;,
                                           &apos;60576&apos;,
                                           &apos;24671&apos;,
                                           &apos;45549&apos;,
                                           &apos;13376&apos;,
                                           &apos;50016&apos;,
                                           &apos;33123&apos;,
                                           &apos;19769&apos;,
                                           &apos;22927&apos;,
                                           &apos;97789&apos;,
                                           &apos;46081&apos;,
                                           &apos;72151&apos;,
                                           &apos;15723&apos;,
                                           &apos;46136&apos;,
                                           &apos;51949&apos;,
                                           &apos;68100&apos;,
                                           &apos;96888&apos;,
                                           &apos;64528&apos;,
                                           &apos;14171&apos;,
                                           &apos;79777&apos;,
                                           &apos;28709&apos;,
                                           &apos;11489&apos;,
                                           &apos;25103&apos;,
                                           &apos;32213&apos;,
                                           &apos;78668&apos;,
                                           &apos;22245&apos;,
                                           &apos;15798&apos;,
                                           &apos;27156&apos;,
                                           &apos;37930&apos;,
                                           &apos;62971&apos;,
                                           &apos;21337&apos;,
                                           &apos;51622&apos;,
                                           &apos;67853&apos;,
                                           &apos;10567&apos;,
                                           &apos;38415&apos;,
                                           &apos;15455&apos;,
                                           &apos;58263&apos;,
                                           &apos;42029&apos;,
                                           &apos;60279&apos;,
                                           &apos;37125&apos;,
                                           &apos;56240&apos;,
                                           &apos;88190&apos;,
                                           &apos;50308&apos;,
                                           &apos;26859&apos;,
                                           &apos;64457&apos;,
                                           &apos;89091&apos;,
                                           &apos;82136&apos;,
                                           &apos;62377&apos;,
                                           &apos;36233&apos;,
                                           &apos;63837&apos;,
                                           &apos;58078&apos;,
                                           &apos;17043&apos;,
                                           &apos;30010&apos;,
                                           &apos;60099&apos;,
                                           &apos;28810&apos;,
                                           &apos;98025&apos;,
                                           &apos;29178&apos;,
                                           &apos;87343&apos;,
                                           &apos;73273&apos;,
                                           &apos;30469&apos;,
                                           &apos;64034&apos;,
                                           &apos;39516&apos;,
                                           &apos;86057&apos;,
                                           &apos;21309&apos;,
                                           &apos;90257&apos;,
                                           &apos;67875&apos;,
                                           &apos;40162&apos;,
                                           &apos;11356&apos;,
                                           &apos;73650&apos;,
                                           &apos;61810&apos;,
                                           &apos;72013&apos;,
                                           &apos;30431&apos;,
                                           &apos;22461&apos;,
                                           &apos;19512&apos;,
                                           &apos;13375&apos;,
                                           &apos;55307&apos;,
                                           &apos;30625&apos;,
                                           &apos;83849&apos;,
                                           &apos;68908&apos;,
                                           &apos;26689&apos;,
                                           &apos;96451&apos;,
                                           &apos;38193&apos;,
                                           &apos;46820&apos;,
                                           &apos;88885&apos;,
                                           &apos;84935&apos;,
                                           &apos;69035&apos;,
                                           &apos;83144&apos;,
                                           &apos;47537&apos;,
                                           &apos;56616&apos;,
                                           &apos;94983&apos;,
                                           &apos;48033&apos;,
                                           &apos;69952&apos;,
                                           &apos;25486&apos;,
                                           &apos;61547&apos;,
                                           &apos;27385&apos;,
                                           &apos;61860&apos;,
                                           &apos;58048&apos;,
                                           &apos;56910&apos;,
                                           &apos;16807&apos;,
                                           &apos;17871&apos;,
                                           &apos;35258&apos;,
                                           &apos;31387&apos;,
                                           &apos;35458&apos;,
                                           &apos;35576&apos;)) INTERSECT
           (SELECT ca_zip
            FROM
              (SELECT SUBSTRING(ca_zip, 1, 5) ca_zip,
                      count(*) cnt
               FROM TPCDS.customer_address,
                    TPCDS.customer
               WHERE ca_address_sk = c_current_addr_sk
                 AND c_preferred_cust_flag=&apos;Y&apos;
               GROUP BY ca_zip
               HAVING count(*) &gt; 10) A1)) A2) V1
WHERE ss_store_sk = s_store_sk
  AND ss_sold_date_sk = d_date_sk
  AND d_qoy = 2
  AND d_year = 1998
  AND (SUBSTRING(s_zip, 1, 2) = SUBSTRING(V1.ca_zip, 1, 2))
GROUP BY s_store_name
ORDER BY s_store_name
OPTION (LABEL = &apos;q8&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q9" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q9.sql--

SELECT CASE
           WHEN
                  (SELECT count(*)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 1 AND 20) &gt; 74129 THEN
                  (SELECT avg(ss_ext_discount_amt)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 1 AND 20)
           ELSE
                  (SELECT avg(ss_net_paid)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 1 AND 20)
       END bucket1,
       CASE
           WHEN
                  (SELECT count(*)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 21 AND 40) &gt; 122840 THEN
                  (SELECT avg(ss_ext_discount_amt)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 21 AND 40)
           ELSE
                  (SELECT avg(ss_net_paid)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 21 AND 40)
       END bucket2,
       CASE
           WHEN
                  (SELECT count(*)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 41 AND 60) &gt; 56580 THEN
                  (SELECT avg(ss_ext_discount_amt)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 41 AND 60)
           ELSE
                  (SELECT avg(ss_net_paid)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 41 AND 60)
       END bucket3,
       CASE
           WHEN
                  (SELECT count(*)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 61 AND 80) &gt; 10097 THEN
                  (SELECT avg(ss_ext_discount_amt)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 61 AND 80)
           ELSE
                  (SELECT avg(ss_net_paid)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 61 AND 80)
       END bucket4,
       CASE
           WHEN
                  (SELECT count(*)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 81 AND 100) &gt; 165306 THEN
                  (SELECT avg(ss_ext_discount_amt)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 81 AND 100)
           ELSE
                  (SELECT avg(ss_net_paid)
                   FROM TPCDS.store_sales
                   WHERE ss_quantity BETWEEN 81 AND 100)
       END bucket5
FROM TPCDS.reason
WHERE r_reason_sk = 1
OPTION (LABEL = &apos;q9&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q10" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q10.sql--

SELECT TOP 100 cd_gender,
       cd_marital_status,
       cd_education_status,
       count(*) cnt1,
       cd_purchase_estimate,
       count(*) cnt2,
       cd_credit_rating,
       count(*) cnt3,
       cd_dep_count,
       count(*) cnt4,
       cd_dep_employed_count,
       count(*) cnt5,
       cd_dep_college_count,
       count(*) cnt6
FROM TPCDS.customer c,
     TPCDS.customer_address ca,
     TPCDS.customer_demographics
WHERE c.c_current_addr_sk = ca.ca_address_sk
  AND ca_county IN (&apos;Rush County&apos;,
                    &apos;Toole County&apos;,
                    &apos;Jefferson County&apos;,
                    &apos;Dona Ana County&apos;,
                    &apos;La Porte County&apos;)
  AND cd_demo_sk = c.c_current_cdemo_sk
  AND EXISTS
    (SELECT *
     FROM TPCDS.store_sales,
          TPCDS.date_dim
     WHERE c.c_customer_sk = ss_customer_sk
       AND ss_sold_date_sk = d_date_sk
       AND d_year = 2002
       AND d_moy BETWEEN 1 AND 1+3)
  AND (EXISTS
         (SELECT *
          FROM TPCDS.web_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = ws_bill_customer_sk
            AND ws_sold_date_sk = d_date_sk
            AND d_year = 2002
            AND d_moy BETWEEN 1 AND 1+3)
       OR EXISTS
         (SELECT *
          FROM TPCDS.catalog_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = cs_ship_customer_sk
            AND cs_sold_date_sk = d_date_sk
            AND d_year = 2002
            AND d_moy BETWEEN 1 AND 1+3))
GROUP BY cd_gender,
         cd_marital_status,
         cd_education_status,
         cd_purchase_estimate,
         cd_credit_rating,
         cd_dep_count,
         cd_dep_employed_count,
         cd_dep_college_count
ORDER BY cd_gender,
         cd_marital_status,
         cd_education_status,
         cd_purchase_estimate,
         cd_credit_rating,
         cd_dep_count,
         cd_dep_employed_count,
         cd_dep_college_count
OPTION (LABEL = &apos;q10&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q11" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q11.sql--
 WITH year_total AS
  (SELECT c_customer_id customer_id ,
          c_first_name customer_first_name ,
          c_last_name customer_last_name ,
          c_preferred_cust_flag customer_preferred_cust_flag ,
          c_birth_country customer_birth_country ,
          c_login customer_login ,
          c_email_address customer_email_address ,
          d_year dyear ,
          sum(ss_ext_list_price-ss_ext_discount_amt) year_total ,
          &apos;s&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.store_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ss_customer_sk
     AND ss_sold_date_sk = d_date_sk
   GROUP BY c_customer_id ,
            c_first_name ,
            c_last_name ,
            c_preferred_cust_flag ,
            c_birth_country ,
            c_login ,
            c_email_address ,
            d_year
   UNION ALL SELECT c_customer_id customer_id ,
                    c_first_name customer_first_name ,
                    c_last_name customer_last_name ,
                    c_preferred_cust_flag customer_preferred_cust_flag ,
                    c_birth_country customer_birth_country ,
                    c_login customer_login ,
                    c_email_address customer_email_address ,
                    d_year dyear ,
                    sum(ws_ext_list_price-ws_ext_discount_amt) year_total ,
                    &apos;w&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.web_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ws_bill_customer_sk
     AND ws_sold_date_sk = d_date_sk
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            c_preferred_cust_flag,
            c_birth_country,
            c_login,
            c_email_address,
            d_year)
SELECT TOP 100 t_s_secyear.customer_id ,
       t_s_secyear.customer_first_name ,
       t_s_secyear.customer_last_name ,
       t_s_secyear.customer_preferred_cust_flag
FROM year_total t_s_firstyear ,
     year_total t_s_secyear ,
     year_total t_w_firstyear ,
     year_total t_w_secyear
WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id
  AND t_s_firstyear.customer_id = t_w_secyear.customer_id
  AND t_s_firstyear.customer_id = t_w_firstyear.customer_id
  AND t_s_firstyear.sale_type = &apos;s&apos;
  AND t_w_firstyear.sale_type = &apos;w&apos;
  AND t_s_secyear.sale_type = &apos;s&apos;
  AND t_w_secyear.sale_type = &apos;w&apos;
  AND t_s_firstyear.dyear = 2001
  AND t_s_secyear.dyear = 2001+1
  AND t_w_firstyear.dyear = 2001
  AND t_w_secyear.dyear = 2001+1
  AND t_s_firstyear.year_total &gt; 0
  AND t_w_firstyear.year_total &gt; 0
  AND CASE
          WHEN t_w_firstyear.year_total &gt; 0 THEN t_w_secyear.year_total / t_w_firstyear.year_total
          ELSE 0.0
      END &gt; CASE
                WHEN t_s_firstyear.year_total &gt; 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total
                ELSE 0.0
            END
ORDER BY t_s_secyear.customer_id ,
         t_s_secyear.customer_first_name ,
         t_s_secyear.customer_last_name ,
         t_s_secyear.customer_preferred_cust_flag
OPTION (LABEL = &apos;q11&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q12" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q12.sql--

SELECT TOP 100 i_item_id,
       i_item_desc,
       i_category,
       i_class,
       i_current_price,
       sum(ws_ext_sales_price) AS itemrevenue,
       sum(ws_ext_sales_price)*100/sum(sum(ws_ext_sales_price)) OVER (PARTITION BY i_class) AS revenueratio
FROM TPCDS.web_sales,
     TPCDS.item,
     TPCDS.date_dim
WHERE ws_item_sk = i_item_sk
  AND i_category IN (&apos;Sports&apos;,
                     &apos;Books&apos;,
                     &apos;Home&apos;)
  AND ws_sold_date_sk = d_date_sk
  AND d_date BETWEEN cast(&apos;1999-02-22&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;1999-02-22&apos; AS date)))
GROUP BY i_item_id,
         i_item_desc,
         i_category,
         i_class,
         i_current_price
ORDER BY i_category,
         i_class,
         i_item_id,
         i_item_desc,
         revenueratio
OPTION (LABEL = &apos;q12&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q13" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q13.sql--

SELECT avg(ss_quantity) ,
       avg(ss_ext_sales_price) ,
       avg(ss_ext_wholesale_cost) ,
       sum(ss_ext_wholesale_cost)
FROM TPCDS.store_sales ,
     TPCDS.store ,
     TPCDS.customer_demographics ,
     TPCDS.household_demographics ,
     TPCDS.customer_address ,
     TPCDS.date_dim
WHERE s_store_sk = ss_store_sk
  AND ss_sold_date_sk = d_date_sk
  AND d_year = 2001 and((ss_hdemo_sk=hd_demo_sk
                         AND cd_demo_sk = ss_cdemo_sk
                         AND cd_marital_status = &apos;M&apos;
                         AND cd_education_status = &apos;Advanced Degree&apos;
                         AND ss_sales_price BETWEEN 100.00 AND 150.00
                         AND hd_dep_count = 3)
                        OR (ss_hdemo_sk=hd_demo_sk
                            AND cd_demo_sk = ss_cdemo_sk
                            AND cd_marital_status = &apos;S&apos;
                            AND cd_education_status = &apos;College&apos;
                            AND ss_sales_price BETWEEN 50.00 AND 100.00
                            AND hd_dep_count = 1)
                        OR (ss_hdemo_sk=hd_demo_sk
                            AND cd_demo_sk = ss_cdemo_sk
                            AND cd_marital_status = &apos;W&apos;
                            AND cd_education_status = &apos;2 yr Degree&apos;
                            AND ss_sales_price BETWEEN 150.00 AND 200.00
                            AND hd_dep_count = 1)) and((ss_addr_sk = ca_address_sk
                                                        AND ca_country = &apos;United States&apos;
                                                        AND ca_state IN (&apos;TX&apos;, &apos;OH&apos;, &apos;TX&apos;)
                                                        AND ss_net_profit BETWEEN 100 AND 200)
                                                       OR (ss_addr_sk = ca_address_sk
                                                           AND ca_country = &apos;United States&apos;
                                                           AND ca_state IN (&apos;OR&apos;, &apos;NM&apos;, &apos;KY&apos;)
                                                           AND ss_net_profit BETWEEN 150 AND 300)
                                                       OR (ss_addr_sk = ca_address_sk
                                                           AND ca_country = &apos;United States&apos;
                                                           AND ca_state IN (&apos;VA&apos;, &apos;TX&apos;, &apos;MS&apos;)
                                                           AND ss_net_profit BETWEEN 50 AND 250))
OPTION (LABEL = &apos;q13&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14a" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q14a.sql--
 WITH cross_items AS
  (SELECT i_item_sk ss_item_sk
   FROM TPCDS.item,

     (SELECT iss.i_brand_id brand_id,
             iss.i_class_id class_id,
             iss.i_category_id category_id
      FROM TPCDS.store_sales,
           TPCDS.item iss,
           TPCDS.date_dim d1
      WHERE ss_item_sk = iss.i_item_sk
        AND ss_sold_date_sk = d1.d_date_sk
        AND d1.d_year BETWEEN 1999 AND 1999 + 2 INTERSECT
        SELECT ics.i_brand_id,
               ics.i_class_id,
               ics.i_category_id
        FROM TPCDS.catalog_sales,
             TPCDS.item ics,
             TPCDS.date_dim d2 WHERE cs_item_sk = ics.i_item_sk
        AND cs_sold_date_sk = d2.d_date_sk
        AND d2.d_year BETWEEN 1999 AND 1999 + 2 INTERSECT
        SELECT iws.i_brand_id,
               iws.i_class_id,
               iws.i_category_id
        FROM TPCDS.web_sales,
             TPCDS.item iws,
             TPCDS.date_dim d3 WHERE ws_item_sk = iws.i_item_sk
        AND ws_sold_date_sk = d3.d_date_sk
        AND d3.d_year BETWEEN 1999 AND 1999 + 2) x
   WHERE i_brand_id = brand_id
     AND i_class_id = class_id
     AND i_category_id = category_id ),
      avg_sales AS
  (SELECT avg(quantity*list_price) average_sales
   FROM
     (SELECT ss_quantity quantity,
             ss_list_price list_price
      FROM TPCDS.store_sales,
           TPCDS.date_dim
      WHERE ss_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 2001
      UNION ALL SELECT cs_quantity quantity,
                       cs_list_price list_price
      FROM TPCDS.catalog_sales,
           TPCDS.date_dim
      WHERE cs_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 1999 + 2
      UNION ALL SELECT ws_quantity quantity,
                       ws_list_price list_price
      FROM TPCDS.web_sales,
           TPCDS.date_dim
      WHERE ws_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 1999 + 2) x)
SELECT TOP 100 channel,
       i_brand_id,
       i_class_id,
       i_category_id,
       sum(sales),
       sum(number_sales)
FROM
  (SELECT &apos;store&apos; channel,
                  i_brand_id,
                  i_class_id ,
                  i_category_id,
                  sum(ss_quantity*ss_list_price) sales ,
                  count(*) number_sales
   FROM TPCDS.store_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ss_item_sk IN
       (SELECT ss_item_sk
        FROM cross_items)
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_year = 1999+2
     AND d_moy = 11
   GROUP BY i_brand_id,
            i_class_id,
            i_category_id
   HAVING sum(ss_quantity*ss_list_price) &gt;
     (SELECT average_sales
      FROM avg_sales)
   UNION ALL SELECT &apos;catalog&apos; channel,
                              i_brand_id,
                              i_class_id,
                              i_category_id,
                              sum(cs_quantity*cs_list_price) sales,
                              count(*) number_sales
   FROM TPCDS.catalog_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE cs_item_sk IN
       (SELECT ss_item_sk
        FROM cross_items)
     AND cs_item_sk = i_item_sk
     AND cs_sold_date_sk = d_date_sk
     AND d_year = 1999+2
     AND d_moy = 11
   GROUP BY i_brand_id,
            i_class_id,
            i_category_id
   HAVING sum(cs_quantity*cs_list_price) &gt;
     (SELECT average_sales
      FROM avg_sales)
   UNION ALL SELECT &apos;web&apos; channel,
                          i_brand_id,
                          i_class_id,
                          i_category_id,
                          sum(ws_quantity*ws_list_price) sales,
                          count(*) number_sales
   FROM TPCDS.web_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ws_item_sk IN
       (SELECT ss_item_sk
        FROM cross_items)
     AND ws_item_sk = i_item_sk
     AND ws_sold_date_sk = d_date_sk
     AND d_year = 1999+2
     AND d_moy = 11
   GROUP BY i_brand_id,
            i_class_id,
            i_category_id
   HAVING sum(ws_quantity*ws_list_price) &gt;
     (SELECT average_sales
      FROM avg_sales)) y
GROUP BY ROLLUP (channel,
                 i_brand_id,
                 i_class_id,
                 i_category_id)
ORDER BY channel,
         i_brand_id,
         i_class_id,
         i_category_id
OPTION (LABEL = &apos;q14a&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q14b" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q14b.sql--
 WITH cross_items AS
  (SELECT i_item_sk ss_item_sk
   FROM TPCDS.item,

     (SELECT iss.i_brand_id brand_id,
             iss.i_class_id class_id,
             iss.i_category_id category_id
      FROM TPCDS.store_sales,
           TPCDS.item iss,
           TPCDS.date_dim d1
      WHERE ss_item_sk = iss.i_item_sk
        AND ss_sold_date_sk = d1.d_date_sk
        AND d1.d_year BETWEEN 1999 AND 1999 + 2 INTERSECT
        SELECT ics.i_brand_id,
               ics.i_class_id,
               ics.i_category_id
        FROM TPCDS.catalog_sales,
             TPCDS.item ics,
             TPCDS.date_dim d2 WHERE cs_item_sk = ics.i_item_sk
        AND cs_sold_date_sk = d2.d_date_sk
        AND d2.d_year BETWEEN 1999 AND 1999 + 2 INTERSECT
        SELECT iws.i_brand_id,
               iws.i_class_id,
               iws.i_category_id
        FROM TPCDS.web_sales,
             TPCDS.item iws,
             TPCDS.date_dim d3 WHERE ws_item_sk = iws.i_item_sk
        AND ws_sold_date_sk = d3.d_date_sk
        AND d3.d_year BETWEEN 1999 AND 1999 + 2) x
   WHERE i_brand_id = brand_id
     AND i_class_id = class_id
     AND i_category_id = category_id ),
      avg_sales AS
  (SELECT avg(quantity*list_price) average_sales
   FROM
     (SELECT ss_quantity quantity,
             ss_list_price list_price
      FROM TPCDS.store_sales,
           TPCDS.date_dim
      WHERE ss_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 1999 + 2
      UNION ALL SELECT cs_quantity quantity,
                       cs_list_price list_price
      FROM TPCDS.catalog_sales,
           TPCDS.date_dim
      WHERE cs_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 1999 + 2
      UNION ALL SELECT ws_quantity quantity,
                       ws_list_price list_price
      FROM TPCDS.web_sales,
           TPCDS.date_dim
      WHERE ws_sold_date_sk = d_date_sk
        AND d_year BETWEEN 1999 AND 1999 + 2) x)
SELECT TOP 100 *
FROM
  (SELECT &apos;store&apos; channel,
                  i_brand_id,
                  i_class_id,
                  i_category_id ,
                  sum(ss_quantity*ss_list_price) sales,
                  count(*) number_sales
   FROM TPCDS.store_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ss_item_sk IN
       (SELECT ss_item_sk
        FROM cross_items)
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_week_seq =
       (SELECT d_week_seq
        FROM TPCDS.date_dim
        WHERE d_year = 1999 + 1
          AND d_moy = 12
          AND d_dom = 11)
   GROUP BY i_brand_id,
            i_class_id,
            i_category_id
   HAVING sum(ss_quantity*ss_list_price) &gt;
     (SELECT average_sales
      FROM avg_sales)) this_year,

  (SELECT &apos;store&apos; channel,
                  i_brand_id,
                  i_class_id ,
                  i_category_id,
                  sum(ss_quantity*ss_list_price) sales,
                  count(*) number_sales
   FROM TPCDS.store_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ss_item_sk IN
       (SELECT ss_item_sk
        FROM cross_items)
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_week_seq =
       (SELECT d_week_seq
        FROM TPCDS.date_dim
        WHERE d_year = 1999
          AND d_moy = 12
          AND d_dom = 11)
   GROUP BY i_brand_id,
            i_class_id,
            i_category_id
   HAVING sum(ss_quantity*ss_list_price) &gt;
     (SELECT average_sales
      FROM avg_sales)) last_year
WHERE this_year.i_brand_id= last_year.i_brand_id
  AND this_year.i_class_id = last_year.i_class_id
  AND this_year.i_category_id = last_year.i_category_id
ORDER BY this_year.channel,
         this_year.i_brand_id,
         this_year.i_class_id,
         this_year.i_category_id
OPTION (LABEL = &apos;q14b&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q15" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q15.sql--

SELECT TOP 100 ca_zip,
       sum(cs_sales_price)
FROM TPCDS.catalog_sales,
     TPCDS.customer,
     TPCDS.customer_address,
     TPCDS.date_dim
WHERE cs_bill_customer_sk = c_customer_sk
  AND c_current_addr_sk = ca_address_sk
  AND (SUBSTRING(ca_zip, 1, 5) IN (&apos;85669&apos;,
                                &apos;86197&apos;,
                                &apos;88274&apos;,
                                &apos;83405&apos;,
                                &apos;86475&apos;,
                                &apos;85392&apos;,
                                &apos;85460&apos;,
                                &apos;80348&apos;,
                                &apos;81792&apos;)
       OR ca_state IN (&apos;CA&apos;,
                       &apos;WA&apos;,
                       &apos;GA&apos;)
       OR cs_sales_price &gt; 500)
  AND cs_sold_date_sk = d_date_sk
  AND d_qoy = 2
  AND d_year = 2001
GROUP BY ca_zip
ORDER BY ca_zip
OPTION (LABEL = &apos;q15&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q16" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q16.sql--

SELECT TOP 100 count(DISTINCT cs_order_number) AS [order count],
       sum(cs_ext_ship_cost) AS [total shipping cost],
       sum(cs_net_profit) AS [total net profit]
FROM TPCDS.catalog_sales cs1,
     TPCDS.date_dim,
     TPCDS.customer_address,
     TPCDS.call_center
WHERE d_date BETWEEN CAST (&apos;2002-02-01&apos; AS date) AND (DATEADD(DAY, 60, cast(&apos;2002-02-01&apos; AS date)))
  AND cs1.cs_ship_date_sk = d_date_sk
  AND cs1.cs_ship_addr_sk = ca_address_sk
  AND ca_state = &apos;GA&apos;
  AND cs1.cs_call_center_sk = cc_call_center_sk
  AND cc_county IN (&apos;Williamson County&apos;,
                    &apos;Williamson County&apos;,
                    &apos;Williamson County&apos;,
                    &apos;Williamson County&apos;,
                    &apos;Williamson County&apos;)
  AND EXISTS
    (SELECT *
     FROM TPCDS.catalog_sales cs2
     WHERE cs1.cs_order_number = cs2.cs_order_number
       AND cs1.cs_warehouse_sk &lt;&gt; cs2.cs_warehouse_sk)
  AND NOT exists
    (SELECT *
     FROM TPCDS.catalog_returns cr1
     WHERE cs1.cs_order_number = cr1.cr_order_number)
ORDER BY count(DISTINCT cs_order_number)
OPTION (LABEL = &apos;q16&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q17" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q17.sql--

SELECT TOP 100 i_item_id ,
       i_item_desc ,
       s_state ,
       count(ss_quantity) AS store_sales_quantitycount ,
       avg(ss_quantity) AS store_sales_quantityave ,
       STDEV(ss_quantity) AS store_sales_quantitystdev ,
       STDEV(ss_quantity)/avg(ss_quantity) AS store_sales_quantitycov ,
       count(sr_return_quantity) as_store_returns_quantitycount ,
       avg(sr_return_quantity) as_store_returns_quantityave ,
       STDEV(sr_return_quantity) as_store_returns_quantitystdev ,
       STDEV(sr_return_quantity)/avg(sr_return_quantity) AS store_returns_quantitycov ,
       count(cs_quantity) AS catalog_sales_quantitycount,
       avg(cs_quantity) AS catalog_sales_quantityave ,
       STDEV(cs_quantity)/avg(cs_quantity) AS catalog_sales_quantitystdev ,
       STDEV(cs_quantity)/avg(cs_quantity) AS catalog_sales_quantitycov
FROM TPCDS.store_sales,
     TPCDS.store_returns,
     TPCDS.catalog_sales,
     TPCDS.date_dim d1,
     TPCDS.date_dim d2,
     TPCDS.date_dim d3,
     TPCDS.store,
     TPCDS.item
WHERE d1.d_quarter_name = &apos;2001Q1&apos;
  AND d1.d_date_sk = ss_sold_date_sk
  AND i_item_sk = ss_item_sk
  AND s_store_sk = ss_store_sk
  AND ss_customer_sk = sr_customer_sk
  AND ss_item_sk = sr_item_sk
  AND ss_ticket_number = sr_ticket_number
  AND sr_returned_date_sk = d2.d_date_sk
  AND d2.d_quarter_name IN (&apos;2001Q1&apos;,
                            &apos;2001Q2&apos;,
                            &apos;2001Q3&apos;)
  AND sr_customer_sk = cs_bill_customer_sk
  AND sr_item_sk = cs_item_sk
  AND cs_sold_date_sk = d3.d_date_sk
  AND d3.d_quarter_name IN (&apos;2001Q1&apos;,
                            &apos;2001Q2&apos;,
                            &apos;2001Q3&apos;)
GROUP BY i_item_id,
         i_item_desc,
         s_state
ORDER BY i_item_id,
         i_item_desc,
         s_state
OPTION (LABEL = &apos;q17&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q18" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q18.sql--

SELECT TOP 100 i_item_id,
       ca_country,
       ca_state,
       ca_county,
       avg(cast(cs_quantity AS decimal(12, 2))) agg1,
       avg(cast(cs_list_price AS decimal(12, 2))) agg2,
       avg(cast(cs_coupon_amt AS decimal(12, 2))) agg3,
       avg(cast(cs_sales_price AS decimal(12, 2))) agg4,
       avg(cast(cs_net_profit AS decimal(12, 2))) agg5,
       avg(cast(c_birth_year AS decimal(12, 2))) agg6,
       avg(cast(cd1.cd_dep_count AS decimal(12, 2))) agg7
FROM TPCDS.catalog_sales,
     TPCDS.customer_demographics cd1,
     TPCDS.customer_demographics cd2,
     TPCDS.customer,
     TPCDS.customer_address,
     TPCDS.date_dim,
     TPCDS.item
WHERE cs_sold_date_sk = d_date_sk
  AND cs_item_sk = i_item_sk
  AND cs_bill_cdemo_sk = cd1.cd_demo_sk
  AND cs_bill_customer_sk = c_customer_sk
  AND cd1.cd_gender = &apos;F&apos;
  AND cd1.cd_education_status = &apos;Unknown&apos;
  AND c_current_cdemo_sk = cd2.cd_demo_sk
  AND c_current_addr_sk = ca_address_sk
  AND c_birth_month IN (1,
                        6,
                        8,
                        9,
                        12,
                        2)
  AND d_year = 1998
  AND ca_state IN (&apos;MS&apos;,
                   &apos;IN&apos;,
                   &apos;ND&apos;,
                   &apos;OK&apos;,
                   &apos;NM&apos;,
                   &apos;VA&apos;,
                   &apos;MS&apos;)
GROUP BY ROLLUP (i_item_id,
                 ca_country,
                 ca_state,
                 ca_county)
ORDER BY ca_country,
         ca_state,
         ca_county,
         i_item_id
OPTION (LABEL = &apos;q18&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q19" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q19.sql--

SELECT TOP 100 i_brand_id brand_id,
       i_brand brand,
       i_manufact_id,
       i_manufact,
       sum(ss_ext_sales_price) ext_price
FROM TPCDS.date_dim,
     TPCDS.store_sales,
     TPCDS.item,
     TPCDS.customer,
     TPCDS.customer_address,
     TPCDS.store
WHERE d_date_sk = ss_sold_date_sk
  AND ss_item_sk = i_item_sk
  AND i_manager_id = 8
  AND d_moy = 11
  AND d_year = 1998
  AND ss_customer_sk = c_customer_sk
  AND c_current_addr_sk = ca_address_sk
  AND SUBSTRING(ca_zip, 1, 5) &lt;&gt; SUBSTRING(s_zip, 1, 5)
  AND ss_store_sk = s_store_sk
GROUP BY i_brand,
         i_brand_id,
         i_manufact_id,
         i_manufact
ORDER BY ext_price DESC,
         brand,
         brand_id,
         i_manufact_id,
         i_manufact
OPTION (LABEL = &apos;q19&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q20" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q20.sql--

SELECT TOP 100 i_item_id,
       i_item_desc ,
       i_category ,
       i_class ,
       i_current_price ,
       sum(cs_ext_sales_price) AS itemrevenue ,
       sum(cs_ext_sales_price)*100/sum(sum(cs_ext_sales_price)) OVER (PARTITION BY i_class) AS revenueratio
FROM TPCDS.catalog_sales,
     TPCDS.item,
     TPCDS.date_dim
WHERE cs_item_sk = i_item_sk
  AND i_category IN (&apos;Sports&apos;,
                     &apos;Books&apos;,
                     &apos;Home&apos;)
  AND cs_sold_date_sk = d_date_sk
  AND d_date BETWEEN cast(&apos;1999-02-22&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;1999-02-22&apos; AS date)))
GROUP BY i_item_id,
         i_item_desc,
         i_category,
         i_class,
         i_current_price
ORDER BY i_category,
         i_class,
         i_item_id,
         i_item_desc,
         revenueratio
OPTION (LABEL = &apos;q20&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q21" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q21.sql--

SELECT TOP 100 *
FROM
  (SELECT w_warehouse_name,
          i_item_id,
          sum(CASE
                  WHEN (cast(d_date AS date) &lt; CAST (&apos;2000-03-11&apos; AS date)) THEN inv_quantity_on_hand
                  ELSE 0
              END) AS inv_before,
          sum(CASE
                  WHEN (cast(d_date AS date) &gt;= CAST (&apos;2000-03-11&apos; AS date)) THEN inv_quantity_on_hand
                  ELSE 0
              END) AS inv_after
   FROM TPCDS.inventory,
        TPCDS.warehouse,
        TPCDS.item,
        TPCDS.date_dim
   WHERE i_current_price BETWEEN 0.99 AND 1.49
     AND i_item_sk = inv_item_sk
     AND inv_warehouse_sk = w_warehouse_sk
     AND inv_date_sk = d_date_sk
     AND d_date BETWEEN (DATEADD(DAY, -30, cast(&apos;2000-03-11&apos; AS date))) AND (DATEADD(DAY, 30, cast(&apos;2000-03-11&apos; AS date)))
   GROUP BY w_warehouse_name,
            i_item_id) x
WHERE (CASE
           WHEN inv_before &gt; 0 THEN inv_after / inv_before
           ELSE NULL
       END) BETWEEN 2.0/3.0 AND 3.0/2.0
ORDER BY w_warehouse_name,
         i_item_id
OPTION (LABEL = &apos;q21&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q22" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q22.sql--

SELECT TOP 100 i_product_name,
       i_brand,
       i_class,
       i_category,
       avg(convert(bigint, inv_quantity_on_hand)) qoh
FROM TPCDS.inventory,
     TPCDS.date_dim,
     TPCDS.item,
     TPCDS.warehouse
WHERE inv_date_sk=d_date_sk
  AND inv_item_sk=i_item_sk
  AND inv_warehouse_sk = w_warehouse_sk
  AND d_month_seq BETWEEN 1200 AND 1200 + 11
GROUP BY rollup(i_product_name, i_brand, i_class, i_category)
ORDER BY qoh,
         i_product_name,
         i_brand,
         i_class,
         i_category
OPTION (LABEL = &apos;q22&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23a" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q23a.sql--
 WITH frequent_ss_items AS
  (SELECT SUBSTRING(i_item_desc, 1, 30) itemdesc,
          i_item_sk item_sk,
          d_date solddate,
          count(*) cnt
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.item
   WHERE ss_sold_date_sk = d_date_sk
     AND ss_item_sk = i_item_sk
     AND d_year IN (2000,
                    2000+1,
                    2000+2,
                    2000+3)
   GROUP BY SUBSTRING(i_item_desc, 1, 30),
            i_item_sk,
            d_date
   HAVING count(*) &gt;4),
      max_store_sales AS
  (SELECT max(csales) tpcds_cmax
   FROM
     (SELECT c_customer_sk,
             sum(ss_quantity*ss_sales_price) csales
      FROM TPCDS.store_sales,
           TPCDS.customer,
           TPCDS.date_dim
      WHERE ss_customer_sk = c_customer_sk
        AND ss_sold_date_sk = d_date_sk
        AND d_year IN (2000,
                       2000+1,
                       2000+2,
                       2000+3)
      GROUP BY c_customer_sk) x),
      best_ss_customer AS
  (SELECT c_customer_sk,
          sum(ss_quantity*ss_sales_price) ssales
   FROM TPCDS.store_sales,
        TPCDS.customer
   WHERE ss_customer_sk = c_customer_sk
   GROUP BY c_customer_sk
   HAVING sum(ss_quantity*ss_sales_price) &gt; (95/100.0) *
     (SELECT *
      FROM max_store_sales))
SELECT TOP 100 sum(sales)
FROM
  (SELECT cs_quantity*cs_list_price sales
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim
   WHERE d_year = 2000
     AND d_moy = 2
     AND cs_sold_date_sk = d_date_sk
     AND cs_item_sk IN
       (SELECT item_sk
        FROM frequent_ss_items)
     AND cs_bill_customer_sk IN
       (SELECT c_customer_sk
        FROM best_ss_customer)
   UNION ALL
     (SELECT ws_quantity*ws_list_price sales
      FROM TPCDS.web_sales,
           TPCDS.date_dim
      WHERE d_year = 2000
        AND d_moy = 2
        AND ws_sold_date_sk = d_date_sk
        AND ws_item_sk IN
          (SELECT item_sk
           FROM frequent_ss_items)
        AND ws_bill_customer_sk IN
          (SELECT c_customer_sk
           FROM best_ss_customer))) x
OPTION (LABEL = &apos;q23a&apos;)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q23b" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q23b.sql--
 WITH frequent_ss_items AS
  (SELECT SUBSTRING(i_item_desc, 1, 30) itemdesc,
          i_item_sk item_sk,
          d_date solddate,
          count(*) cnt
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.item
   WHERE ss_sold_date_sk = d_date_sk
     AND ss_item_sk = i_item_sk
     AND d_year IN (2000,
                    2000+1,
                    2000+2,
                    2000+3)
   GROUP BY SUBSTRING(i_item_desc, 1, 30),
            i_item_sk,
            d_date
   HAVING count(*) &gt; 4),
      max_store_sales AS
  (SELECT max(csales) tpcds_cmax
   FROM
     (SELECT c_customer_sk,
             sum(ss_quantity*ss_sales_price) csales
      FROM TPCDS.store_sales,
           TPCDS.customer,
           TPCDS.date_dim
      WHERE ss_customer_sk = c_customer_sk
        AND ss_sold_date_sk = d_date_sk
        AND d_year IN (2000,
                       2000+1,
                       2000+2,
                       2000+3)
      GROUP BY c_customer_sk) x),
      best_ss_customer AS
  (SELECT c_customer_sk,
          sum(ss_quantity*ss_sales_price) ssales
   FROM TPCDS.store_sales ,
        TPCDS.customer
   WHERE ss_customer_sk = c_customer_sk
   GROUP BY c_customer_sk
   HAVING sum(ss_quantity*ss_sales_price) &gt; (95/100.0) *
     (SELECT *
      FROM max_store_sales))
SELECT TOP 100 c_last_name,
       c_first_name,
       sales
FROM (
        (SELECT c_last_name,
                c_first_name,
                sum(cs_quantity*cs_list_price) sales
         FROM TPCDS.catalog_sales,
              TPCDS.customer,
              TPCDS.date_dim
         WHERE d_year = 2000
           AND d_moy = 2
           AND cs_sold_date_sk = d_date_sk
           AND cs_item_sk IN
             (SELECT item_sk
              FROM frequent_ss_items)
           AND cs_bill_customer_sk IN
             (SELECT c_customer_sk
              FROM best_ss_customer)
           AND cs_bill_customer_sk = c_customer_sk
         GROUP BY c_last_name,
                  c_first_name)
      UNION ALL
        (SELECT c_last_name,
                c_first_name,
                sum(ws_quantity*ws_list_price) sales
         FROM TPCDS.web_sales,
              TPCDS.customer,
              TPCDS.date_dim
         WHERE d_year = 2000
           AND d_moy = 2
           AND ws_sold_date_sk = d_date_sk
           AND ws_item_sk IN
             (SELECT item_sk
              FROM frequent_ss_items)
           AND ws_bill_customer_sk IN
             (SELECT c_customer_sk
              FROM best_ss_customer)
           AND ws_bill_customer_sk = c_customer_sk
         GROUP BY c_last_name,
                  c_first_name)) y
ORDER BY c_last_name,
         c_first_name,
         sales
OPTION (LABEL = &apos;q23b&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24a" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q24a.sql--
 WITH ssales AS
  (SELECT c_last_name,
          c_first_name,
          s_store_name,
          ca_state,
          s_state,
          i_color,
          i_current_price,
          i_manager_id,
          i_units,
          i_size,
          sum(ss_net_paid) netpaid
   FROM TPCDS.store_sales,
        TPCDS.store_returns,
        TPCDS.store,
        TPCDS.item,
        TPCDS.customer,
        TPCDS.customer_address
   WHERE ss_ticket_number = sr_ticket_number
     AND ss_item_sk = sr_item_sk
     AND ss_customer_sk = c_customer_sk
     AND ss_item_sk = i_item_sk
     AND ss_store_sk = s_store_sk
     AND c_birth_country = upper(ca_country)
     AND s_zip = ca_zip
     AND s_market_id = 8
   GROUP BY c_last_name,
            c_first_name,
            s_store_name,
            ca_state,
            s_state,
            i_color,
            i_current_price,
            i_manager_id,
            i_units,
            i_size)
SELECT c_last_name,
       c_first_name,
       s_store_name,
       sum(netpaid) paid
FROM ssales
WHERE i_color = &apos;pale&apos;
GROUP BY c_last_name,
         c_first_name,
         s_store_name
HAVING sum(netpaid) &gt;
  (SELECT 0.05*avg(netpaid)
   FROM ssales)
OPTION (LABEL = &apos;q24a&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q24b" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q24b.sql--
 WITH ssales AS
  (SELECT c_last_name,
          c_first_name,
          s_store_name,
          ca_state,
          s_state,
          i_color,
          i_current_price,
          i_manager_id,
          i_units,
          i_size,
          sum(ss_net_paid) netpaid
   FROM TPCDS.store_sales,
        TPCDS.store_returns,
        TPCDS.store,
        TPCDS.item,
        TPCDS.customer,
        TPCDS.customer_address
   WHERE ss_ticket_number = sr_ticket_number
     AND ss_item_sk = sr_item_sk
     AND ss_customer_sk = c_customer_sk
     AND ss_item_sk = i_item_sk
     AND ss_store_sk = s_store_sk
     AND c_birth_country = upper(ca_country)
     AND s_zip = ca_zip
     AND s_market_id = 8
   GROUP BY c_last_name,
            c_first_name,
            s_store_name,
            ca_state,
            s_state,
            i_color,
            i_current_price,
            i_manager_id,
            i_units,
            i_size)
SELECT c_last_name,
       c_first_name,
       s_store_name,
       sum(netpaid) paid
FROM ssales
WHERE i_color = &apos;chiffon&apos;
GROUP BY c_last_name,
         c_first_name,
         s_store_name
HAVING sum(netpaid) &gt;
  (SELECT 0.05*avg(netpaid)
   FROM ssales)
OPTION (LABEL = &apos;q24b&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q25" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q25.sql--

SELECT TOP 100 i_item_id,
       i_item_desc,
       s_store_id,
       s_store_name,
       sum(ss_net_profit) AS store_sales_profit,
       sum(sr_net_loss) AS store_returns_loss,
       sum(cs_net_profit) AS catalog_sales_profit
FROM TPCDS.store_sales,
     TPCDS.store_returns,
     TPCDS.catalog_sales,
     TPCDS.date_dim d1,
     TPCDS.date_dim d2,
     TPCDS.date_dim d3,
     TPCDS.store,
     TPCDS.item
WHERE d1.d_moy = 4
  AND d1.d_year = 2001
  AND d1.d_date_sk = ss_sold_date_sk
  AND i_item_sk = ss_item_sk
  AND s_store_sk = ss_store_sk
  AND ss_customer_sk = sr_customer_sk
  AND ss_item_sk = sr_item_sk
  AND ss_ticket_number = sr_ticket_number
  AND sr_returned_date_sk = d2.d_date_sk
  AND d2.d_moy BETWEEN 4 AND 10
  AND d2.d_year = 2001
  AND sr_customer_sk = cs_bill_customer_sk
  AND sr_item_sk = cs_item_sk
  AND cs_sold_date_sk = d3.d_date_sk
  AND d3.d_moy BETWEEN 4 AND 10
  AND d3.d_year = 2001
GROUP BY i_item_id,
         i_item_desc,
         s_store_id,
         s_store_name
ORDER BY i_item_id,
         i_item_desc,
         s_store_id,
         s_store_name
OPTION (LABEL = &apos;q25&apos;)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q26" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q26.sql--

SELECT TOP 100 i_item_id,
       avg(cs_quantity) agg1,
       avg(cs_list_price) agg2,
       avg(cs_coupon_amt) agg3,
       avg(cs_sales_price) agg4
FROM TPCDS.catalog_sales,
     TPCDS.customer_demographics,
     TPCDS.date_dim,
     TPCDS.item,
     TPCDS.promotion
WHERE cs_sold_date_sk = d_date_sk
  AND cs_item_sk = i_item_sk
  AND cs_bill_cdemo_sk = cd_demo_sk
  AND cs_promo_sk = p_promo_sk
  AND cd_gender = &apos;M&apos;
  AND cd_marital_status = &apos;S&apos;
  AND cd_education_status = &apos;College&apos;
  AND (p_channel_email = &apos;N&apos;
       OR p_channel_event = &apos;N&apos;)
  AND d_year = 2000
GROUP BY i_item_id
ORDER BY i_item_id
OPTION (LABEL = &apos;q26&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q27" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q27.sql--

SELECT TOP 100 i_item_id,
       s_state,
       grouping(s_state) g_state,
       avg(ss_quantity) agg1,
       avg(ss_list_price) agg2,
       avg(ss_coupon_amt) agg3,
       avg(ss_sales_price) agg4
FROM TPCDS.store_sales,
     TPCDS.customer_demographics,
     TPCDS.date_dim,
     TPCDS.store,
     TPCDS.item
WHERE ss_sold_date_sk = d_date_sk
  AND ss_item_sk = i_item_sk
  AND ss_store_sk = s_store_sk
  AND ss_cdemo_sk = cd_demo_sk
  AND cd_gender = &apos;M&apos;
  AND cd_marital_status = &apos;S&apos;
  AND cd_education_status = &apos;College&apos;
  AND d_year = 2002
  AND s_state IN (&apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;)
GROUP BY ROLLUP (i_item_id,
                 s_state)
ORDER BY i_item_id,
         s_state
OPTION (LABEL = &apos;q27&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q28" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q28.sql--

SELECT TOP 100 *
FROM
  (SELECT avg(ss_list_price) B1_LP ,
          count(ss_list_price) B1_CNT ,
          count(DISTINCT ss_list_price) B1_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 0 AND 5
     AND (ss_list_price BETWEEN 8 AND 8+10
          OR ss_coupon_amt BETWEEN 459 AND 459+1000
          OR ss_wholesale_cost BETWEEN 57 AND 57+20)) B1
CROSS JOIN
  (SELECT avg(ss_list_price) B2_LP ,
          count(ss_list_price) B2_CNT ,
          count(DISTINCT ss_list_price) B2_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 6 AND 10
     AND (ss_list_price BETWEEN 90 AND 90+10
          OR ss_coupon_amt BETWEEN 2323 AND 2323+1000
          OR ss_wholesale_cost BETWEEN 31 AND 31+20)) B2
CROSS JOIN
  (SELECT avg(ss_list_price) B3_LP ,
          count(ss_list_price) B3_CNT ,
          count(DISTINCT ss_list_price) B3_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 11 AND 15
     AND (ss_list_price BETWEEN 142 AND 142+10
          OR ss_coupon_amt BETWEEN 12214 AND 12214+1000
          OR ss_wholesale_cost BETWEEN 79 AND 79+20)) B3
CROSS JOIN
  (SELECT avg(ss_list_price) B4_LP ,
          count(ss_list_price) B4_CNT ,
          count(DISTINCT ss_list_price) B4_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 16 AND 20
     AND (ss_list_price BETWEEN 135 AND 135+10
          OR ss_coupon_amt BETWEEN 6071 AND 6071+1000
          OR ss_wholesale_cost BETWEEN 38 AND 38+20)) B4
CROSS JOIN
  (SELECT avg(ss_list_price) B5_LP ,
          count(ss_list_price) B5_CNT ,
          count(DISTINCT ss_list_price) B5_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 21 AND 25
     AND (ss_list_price BETWEEN 122 AND 122+10
          OR ss_coupon_amt BETWEEN 836 AND 836+1000
          OR ss_wholesale_cost BETWEEN 17 AND 17+20)) B5
CROSS JOIN
  (SELECT avg(ss_list_price) B6_LP ,
          count(ss_list_price) B6_CNT ,
          count(DISTINCT ss_list_price) B6_CNTD
   FROM TPCDS.store_sales
   WHERE ss_quantity BETWEEN 26 AND 30
     AND (ss_list_price BETWEEN 154 AND 154+10
          OR ss_coupon_amt BETWEEN 7326 AND 7326+1000
          OR ss_wholesale_cost BETWEEN 7 AND 7+20)) B6
OPTION (LABEL = &apos;q28&apos;)

</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q29" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q29.sql--

SELECT TOP 100 i_item_id ,
       i_item_desc ,
       s_store_id ,
       s_store_name ,
       sum(ss_quantity) AS store_sales_quantity ,
       sum(sr_return_quantity) AS store_returns_quantity ,
       sum(cs_quantity) AS catalog_sales_quantity
FROM TPCDS.store_sales,
     TPCDS.store_returns,
     TPCDS.catalog_sales,
     TPCDS.date_dim d1,
     TPCDS.date_dim d2,
     TPCDS.date_dim d3,
     TPCDS.store,
     TPCDS.item
WHERE d1.d_moy = 9
  AND d1.d_year = 1999
  AND d1.d_date_sk = ss_sold_date_sk
  AND i_item_sk = ss_item_sk
  AND s_store_sk = ss_store_sk
  AND ss_customer_sk = sr_customer_sk
  AND ss_item_sk = sr_item_sk
  AND ss_ticket_number = sr_ticket_number
  AND sr_returned_date_sk = d2.d_date_sk
  AND d2.d_moy BETWEEN 9 AND 9 + 3
  AND d2.d_year = 1999
  AND sr_customer_sk = cs_bill_customer_sk
  AND sr_item_sk = cs_item_sk
  AND cs_sold_date_sk = d3.d_date_sk
  AND d3.d_year IN (1999,
                    1999+1,
                    1999+2)
GROUP BY i_item_id,
         i_item_desc,
         s_store_id,
         s_store_name
ORDER BY i_item_id,
         i_item_desc,
         s_store_id,
         s_store_name
OPTION (LABEL = &apos;q29&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q30" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q30.sql--
 WITH customer_total_return AS
  (SELECT wr_returning_customer_sk AS ctr_customer_sk ,
          ca_state AS ctr_state,
          sum(wr_return_amt) AS ctr_total_return
   FROM TPCDS.web_returns,
        TPCDS.date_dim,
        TPCDS.customer_address
   WHERE wr_returned_date_sk = d_date_sk
     AND d_year = 2002
     AND wr_returning_addr_sk = ca_address_sk
   GROUP BY wr_returning_customer_sk,
            ca_state)
SELECT TOP 100 c_customer_id,
       c_salutation,
       c_first_name,
       c_last_name,
       c_preferred_cust_flag ,
       c_birth_day,
       c_birth_month,
       c_birth_year,
       c_birth_country,
       c_login,
       c_email_address ,
       c_last_review_date,
       ctr_total_return
FROM customer_total_return ctr1,
     TPCDS.customer_address,
     TPCDS.customer
WHERE ctr1.ctr_total_return &gt;
    (SELECT avg(ctr_total_return)*1.2
     FROM customer_total_return ctr2
     WHERE ctr1.ctr_state = ctr2.ctr_state)
  AND ca_address_sk = c_current_addr_sk
  AND ca_state = &apos;GA&apos;
  AND ctr1.ctr_customer_sk = c_customer_sk
ORDER BY c_customer_id,
         c_salutation,
         c_first_name,
         c_last_name,
         c_preferred_cust_flag ,
         c_birth_day,
         c_birth_month,
         c_birth_year,
         c_birth_country,
         c_login,
         c_email_address ,
         c_last_review_date,
         ctr_total_return
OPTION (LABEL = &apos;q30&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q31" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q31.sql--
 WITH ss AS
  (SELECT ca_county,
          d_qoy,
          d_year,
          sum(ss_ext_sales_price) AS store_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.customer_address
   WHERE ss_sold_date_sk = d_date_sk
     AND ss_addr_sk=ca_address_sk
   GROUP BY ca_county,
            d_qoy,
            d_year),
      ws AS
  (SELECT ca_county,
          d_qoy,
          d_year,
          sum(ws_ext_sales_price) AS web_sales
   FROM TPCDS.web_sales,
        TPCDS.date_dim,
        TPCDS.customer_address
   WHERE ws_sold_date_sk = d_date_sk
     AND ws_bill_addr_sk=ca_address_sk
   GROUP BY ca_county,
            d_qoy,
            d_year)
SELECT ss1.ca_county ,
       ss1.d_year ,
       ws2.web_sales/ws1.web_sales web_q1_q2_increase ,
       ss2.store_sales/ss1.store_sales store_q1_q2_increase ,
       ws3.web_sales/ws2.web_sales web_q2_q3_increase ,
       ss3.store_sales/ss2.store_sales store_q2_q3_increase
FROM ss ss1,
     ss ss2,
     ss ss3,
     ws ws1,
     ws ws2,
     ws ws3
WHERE ss1.d_qoy = 1
  AND ss1.d_year = 2000
  AND ss1.ca_county = ss2.ca_county
  AND ss2.d_qoy = 2
  AND ss2.d_year = 2000
  AND ss2.ca_county = ss3.ca_county
  AND ss3.d_qoy = 3
  AND ss3.d_year = 2000
  AND ss1.ca_county = ws1.ca_county
  AND ws1.d_qoy = 1
  AND ws1.d_year = 2000
  AND ws1.ca_county = ws2.ca_county
  AND ws2.d_qoy = 2
  AND ws2.d_year = 2000
  AND ws1.ca_county = ws3.ca_county
  AND ws3.d_qoy = 3
  AND ws3.d_year = 2000
  AND CASE
          WHEN ws1.web_sales &gt; 0 THEN ws2.web_sales/ws1.web_sales
          ELSE NULL
      END &gt; CASE
                WHEN ss1.store_sales &gt; 0 THEN ss2.store_sales/ss1.store_sales
                ELSE NULL
            END
  AND CASE
          WHEN ws2.web_sales &gt; 0 THEN ws3.web_sales/ws2.web_sales
          ELSE NULL
      END &gt; CASE
                WHEN ss2.store_sales &gt; 0 THEN ss3.store_sales/ss2.store_sales
                ELSE NULL
            END
ORDER BY ss1.ca_county
OPTION (LABEL = &apos;q31&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q32" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q32.sql--

SELECT TOP 100 sum(cs_ext_discount_amt) AS [excess discount amount]
FROM TPCDS.catalog_sales,
     TPCDS.item,
     TPCDS.date_dim
WHERE i_manufact_id = 977
  AND i_item_sk = cs_item_sk
  AND d_date BETWEEN CAST (&apos;2000-01-27&apos; AS date) AND (DATEADD(DAY, 90, cast(&apos;2000-01-27&apos; AS date)))
  AND d_date_sk = cs_sold_date_sk
  AND cs_ext_discount_amt &gt;
    (SELECT 1.3 * avg(cs_ext_discount_amt)
     FROM TPCDS.catalog_sales,
          TPCDS.date_dim
     WHERE cs_item_sk = i_item_sk
       AND d_date BETWEEN CAST (&apos;2000-01-27&apos; AS date) AND (DATEADD(DAY, 90, cast(&apos;2000-01-27&apos; AS date)))
       AND d_date_sk = cs_sold_date_sk)
OPTION (LABEL = &apos;q32&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q33" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q33.sql--
 WITH ss AS
  (SELECT i_manufact_id,
          sum(ss_ext_sales_price) total_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_manufact_id IN
       (SELECT i_manufact_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Electronics&apos;))
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 5
     AND ss_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_manufact_id),
      cs AS
  (SELECT i_manufact_id,
          sum(cs_ext_sales_price) total_sales
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_manufact_id IN
       (SELECT i_manufact_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Electronics&apos;))
     AND cs_item_sk = i_item_sk
     AND cs_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 5
     AND cs_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_manufact_id),
      ws AS
  (SELECT i_manufact_id,
          sum(ws_ext_sales_price) total_sales
   FROM TPCDS.web_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_manufact_id IN
       (SELECT i_manufact_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Electronics&apos;))
     AND ws_item_sk = i_item_sk
     AND ws_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 5
     AND ws_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_manufact_id)
SELECT TOP 100 i_manufact_id,
       sum(total_sales) total_sales
FROM
  (SELECT *
   FROM ss
   UNION ALL SELECT *
   FROM cs
   UNION ALL SELECT *
   FROM ws) tmp1
GROUP BY i_manufact_id
ORDER BY total_sales
OPTION (LABEL = &apos;q33&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q34" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q34.sql--

SELECT c_last_name,
       c_first_name,
       c_salutation,
       c_preferred_cust_flag,
       ss_ticket_number,
       cnt
FROM
  (SELECT ss_ticket_number,
          ss_customer_sk,
          count(*) cnt
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store,
        TPCDS.household_demographics
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_store_sk = TPCDS.store.s_store_sk
     AND TPCDS.store_sales.ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND (TPCDS.date_dim.d_dom BETWEEN 1 AND 3
          OR TPCDS.date_dim.d_dom BETWEEN 25 AND 28)
     AND (TPCDS.household_demographics.hd_buy_potential = &apos;&gt;10000&apos;
          OR TPCDS.household_demographics.hd_buy_potential = &apos;unknown&apos;)
     AND TPCDS.household_demographics.hd_vehicle_count &gt; 0
     AND (CASE
              WHEN TPCDS.household_demographics.hd_vehicle_count &gt; 0 THEN TPCDS.household_demographics.hd_dep_count/ TPCDS.household_demographics.hd_vehicle_count
              ELSE NULL
          END) &gt; 1.2
     AND TPCDS.date_dim.d_year IN (1999,
                                   1999+1,
                                   1999+2)
     AND TPCDS.store.s_county IN (&apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;,
                                  &apos;Williamson County&apos;)
   GROUP BY ss_ticket_number,
            ss_customer_sk) dn,
     TPCDS.customer
WHERE ss_customer_sk = c_customer_sk
  AND cnt BETWEEN 15 AND 20
ORDER BY c_last_name,
         c_first_name,
         c_salutation,
         c_preferred_cust_flag DESC,
         ss_ticket_number
OPTION (LABEL = &apos;q34&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q35" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q35.sql--

SELECT TOP 100 ca_state,
       cd_gender,
       cd_marital_status,
       cd_dep_count,
       count(*) cnt1,
       min(cd_dep_count),
       max(cd_dep_count),
       avg(cd_dep_count),
       cd_dep_employed_count,
       count(*) cnt2,
       min(cd_dep_employed_count),
       max(cd_dep_employed_count),
       avg(cd_dep_employed_count),
       cd_dep_college_count,
       count(*) cnt3,
       min(cd_dep_college_count),
       max(cd_dep_college_count),
       avg(cd_dep_college_count)
FROM TPCDS.customer c,
     TPCDS.customer_address ca,
     TPCDS.customer_demographics
WHERE c.c_current_addr_sk = ca.ca_address_sk
  AND cd_demo_sk = c.c_current_cdemo_sk
  AND EXISTS
    (SELECT *
     FROM TPCDS.store_sales,
          TPCDS.date_dim
     WHERE c.c_customer_sk = ss_customer_sk
       AND ss_sold_date_sk = d_date_sk
       AND d_year = 2002
       AND d_qoy &lt; 4)
  AND (EXISTS
         (SELECT *
          FROM TPCDS.web_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = ws_bill_customer_sk
            AND ws_sold_date_sk = d_date_sk
            AND d_year = 2002
            AND d_qoy &lt; 4)
       OR EXISTS
         (SELECT *
          FROM TPCDS.catalog_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = cs_ship_customer_sk
            AND cs_sold_date_sk = d_date_sk
            AND d_year = 2002
            AND d_qoy &lt; 4))
GROUP BY ca_state,
         cd_gender,
         cd_marital_status,
         cd_dep_count,
         cd_dep_employed_count,
         cd_dep_college_count
ORDER BY ca_state,
         cd_gender,
         cd_marital_status,
         cd_dep_count,
         cd_dep_employed_count,
         cd_dep_college_count
OPTION (LABEL = &apos;q35&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q36" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q36.sql--

SELECT *
FROM
(
SELECT TOP 100 sum(ss_net_profit)/sum(ss_ext_sales_price) AS gross_margin ,
       i_category ,
       i_class ,
       grouping(i_category)+grouping(i_class) AS lochierarchy ,
       rank() OVER (PARTITION BY grouping(i_category)+grouping(i_class),
                                 CASE
                                     WHEN grouping(i_class) = 0 THEN i_category
                                 END
                    ORDER BY sum(ss_net_profit)/sum(ss_ext_sales_price) ASC) AS rank_within_parent
FROM TPCDS.store_sales,
     TPCDS.date_dim d1,
     TPCDS.item,
     TPCDS.store
WHERE d1.d_year = 2001
  AND d1.d_date_sk = ss_sold_date_sk
  AND i_item_sk = ss_item_sk
  AND s_store_sk = ss_store_sk
  AND s_state IN (&apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;,
                  &apos;TN&apos;)
GROUP BY rollup(i_category, i_class)
) AS a
ORDER BY lochierarchy DESC ,
         CASE
             WHEN lochierarchy = 0 THEN i_category
         END ,
         rank_within_parent
OPTION (LABEL = &apos;q36&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q37" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q37.sql--

SELECT TOP 100 i_item_id,
       i_item_desc,
       i_current_price
FROM TPCDS.item,
     TPCDS.inventory,
     TPCDS.date_dim,
     TPCDS.catalog_sales
WHERE i_current_price BETWEEN 68 AND 68 + 30
  AND inv_item_sk = i_item_sk
  AND d_date_sk=inv_date_sk
  AND d_date BETWEEN cast(&apos;2000-02-01&apos; AS date) AND (DATEADD(DAY, 60, cast(&apos;2000-02-01&apos; AS date)))
  AND i_manufact_id IN (677,
                        940,
                        694,
                        808)
  AND inv_quantity_on_hand BETWEEN 100 AND 500
  AND cs_item_sk = i_item_sk
GROUP BY i_item_id,
         i_item_desc,
         i_current_price
ORDER BY i_item_id
OPTION (LABEL = &apos;q37&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q38" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q38.sql--

SELECT TOP 100 count(*)
FROM
  (SELECT DISTINCT c_last_name,
                   c_first_name,
                   d_date
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.customer
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_customer_sk = TPCDS.customer.c_customer_sk
     AND d_month_seq BETWEEN 1200 AND 1200 + 11 INTERSECT
     SELECT DISTINCT c_last_name,
                     c_first_name,
                     d_date
     FROM TPCDS.catalog_sales,
          TPCDS.date_dim,
          TPCDS.customer WHERE TPCDS.catalog_sales.cs_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.catalog_sales.cs_bill_customer_sk = TPCDS.customer.c_customer_sk
     AND d_month_seq BETWEEN 1200 AND 1200 + 11 INTERSECT
     SELECT DISTINCT c_last_name,
                     c_first_name,
                     d_date
     FROM TPCDS.web_sales,
          TPCDS.date_dim,
          TPCDS.customer WHERE TPCDS.web_sales.ws_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.web_sales.ws_bill_customer_sk = TPCDS.customer.c_customer_sk
     AND d_month_seq BETWEEN 1200 AND 1200 + 11 ) hot_cust
OPTION (LABEL = &apos;q38&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39a" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q39a.sql--
 WITH inv AS
  (SELECT w_warehouse_name,
          w_warehouse_sk,
          i_item_sk,
          d_moy ,
          stdev,
          mean,
          CASE mean
              WHEN 0 THEN NULL
              ELSE stdev/mean
          END cov
   FROM
     (SELECT w_warehouse_name,
             w_warehouse_sk,
             i_item_sk,
             d_moy ,
             STDEV(inv_quantity_on_hand) stdev,
             avg(inv_quantity_on_hand) mean
      FROM TPCDS.inventory,
           TPCDS.item,
           TPCDS.warehouse,
           TPCDS.date_dim
      WHERE inv_item_sk = i_item_sk
        AND inv_warehouse_sk = w_warehouse_sk
        AND inv_date_sk = d_date_sk
        AND d_year = 2001
      GROUP BY w_warehouse_name,
               w_warehouse_sk,
               i_item_sk,
               d_moy) foo
   WHERE CASE mean
             WHEN 0 THEN 0
             ELSE stdev/mean
         END &gt; 1)
SELECT inv1.w_warehouse_sk,
       inv1.i_item_sk,
       inv1.d_moy,
       inv1.mean,
       inv1.cov ,
       inv2.w_warehouse_sk,
       inv2.i_item_sk,
       inv2.d_moy,
       inv2.mean,
       inv2.cov
FROM inv inv1,
     inv inv2
WHERE inv1.i_item_sk = inv2.i_item_sk
  AND inv1.w_warehouse_sk = inv2.w_warehouse_sk
  AND inv1.d_moy=1
  AND inv2.d_moy=1+1
ORDER BY inv1.w_warehouse_sk,
         inv1.i_item_sk,
         inv1.d_moy,
         inv1.mean,
         inv1.cov ,
         inv2.d_moy,
         inv2.mean,
         inv2.cov
OPTION (LABEL = &apos;q39a&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q39b" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q39b.sql--
 WITH inv AS
  (SELECT w_warehouse_name,
          w_warehouse_sk,
          i_item_sk,
          d_moy ,
          stdev,
          mean,
          CASE mean
              WHEN 0 THEN NULL
              ELSE stdev/mean
          END cov
   FROM
     (SELECT w_warehouse_name,
             w_warehouse_sk,
             i_item_sk,
             d_moy ,
             STDEV(inv_quantity_on_hand) stdev,
             avg(inv_quantity_on_hand) mean
      FROM TPCDS.inventory,
           TPCDS.item,
           TPCDS.warehouse,
           TPCDS.date_dim
      WHERE inv_item_sk = i_item_sk
        AND inv_warehouse_sk = w_warehouse_sk
        AND inv_date_sk = d_date_sk
        AND d_year = 2001
      GROUP BY w_warehouse_name,
               w_warehouse_sk,
               i_item_sk,
               d_moy) foo
   WHERE CASE mean
             WHEN 0 THEN 0
             ELSE stdev/mean
         END &gt; 1)
SELECT inv1.w_warehouse_sk,
       inv1.i_item_sk,
       inv1.d_moy,
       inv1.mean,
       inv1.cov ,
       inv2.w_warehouse_sk,
       inv2.i_item_sk,
       inv2.d_moy,
       inv2.mean,
       inv2.cov
FROM inv inv1,
     inv inv2
WHERE inv1.i_item_sk = inv2.i_item_sk
  AND inv1.w_warehouse_sk = inv2.w_warehouse_sk
  AND inv1.d_moy=1
  AND inv2.d_moy=1+1
  AND inv1.cov &gt; 1.5
ORDER BY inv1.w_warehouse_sk,
         inv1.i_item_sk,
         inv1.d_moy,
         inv1.mean,
         inv1.cov ,
         inv2.d_moy,
         inv2.mean,
         inv2.cov
OPTION (LABEL = &apos;q39b&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q40" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q40.sql--

SELECT TOP 100 w_state ,
       i_item_id ,
       sum(CASE
               WHEN (cast(d_date AS date) &lt; cast(&apos;2000-03-11&apos; AS date)) THEN cs_sales_price - coalesce(cr_refunded_cash, 0)
               ELSE 0
           END) AS sales_before ,
       sum(CASE
               WHEN (cast(d_date AS date) &gt;= cast(&apos;2000-03-11&apos; AS date)) THEN cs_sales_price - coalesce(cr_refunded_cash, 0)
               ELSE 0
           END) AS sales_after
FROM TPCDS.catalog_sales
LEFT OUTER JOIN TPCDS.catalog_returns ON (cs_order_number = cr_order_number
                                          AND cs_item_sk = cr_item_sk) ,TPCDS.warehouse,
                                                                        TPCDS.item,
                                                                        TPCDS.date_dim
WHERE i_current_price BETWEEN 0.99 AND 1.49
  AND i_item_sk = cs_item_sk
  AND cs_warehouse_sk = w_warehouse_sk
  AND cs_sold_date_sk = d_date_sk
  AND d_date BETWEEN (DATEADD(DAY, -30, cast(&apos;2000-03-11&apos; AS date))) AND (DATEADD(DAY, 30, cast(&apos;2000-03-11&apos; AS date)))
GROUP BY w_state,
         i_item_id
ORDER BY w_state,
         i_item_id
OPTION (LABEL = &apos;q40&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q41" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q41.sql--

SELECT TOP 100 *
FROM
(SELECT distinct(i_product_name)
FROM TPCDS.item i1
WHERE i_manufact_id BETWEEN 738 AND 738+40
  AND
    (SELECT count(*) AS item_cnt
     FROM TPCDS.item
     WHERE (i_manufact = i1.i_manufact
            AND ((i_category = &apos;Women&apos;
                  AND (i_color = &apos;powder&apos;
                       OR i_color = &apos;khaki&apos;)
                  AND (i_units = &apos;Ounce&apos;
                       OR i_units = &apos;Oz&apos;)
                  AND (i_size = &apos;medium&apos;
                       OR i_size = &apos;extra large&apos;))
                 OR (i_category = &apos;Women&apos;
                     AND (i_color = &apos;brown&apos;
                          OR i_color = &apos;honeydew&apos;)
                     AND (i_units = &apos;Bunch&apos;
                          OR i_units = &apos;Ton&apos;)
                     AND (i_size = &apos;N/A&apos;
                          OR i_size = &apos;small&apos;))
                 OR (i_category = &apos;Men&apos;
                     AND (i_color = &apos;floral&apos;
                          OR i_color = &apos;deep&apos;)
                     AND (i_units = &apos;N/A&apos;
                          OR i_units = &apos;Dozen&apos;)
                     AND (i_size = &apos;petite&apos;
                          OR i_size = &apos;large&apos;))
                 OR (i_category = &apos;Men&apos;
                     AND (i_color = &apos;light&apos;
                          OR i_color = &apos;cornflower&apos;)
                     AND (i_units = &apos;Box&apos;
                          OR i_units = &apos;Pound&apos;)
                     AND (i_size = &apos;medium&apos;
                          OR i_size = &apos;extra large&apos;))))
       OR (i_manufact = i1.i_manufact
           AND ((i_category = &apos;Women&apos;
                 AND (i_color = &apos;midnight&apos;
                      OR i_color = &apos;snow&apos;)
                 AND (i_units = &apos;Pallet&apos;
                      OR i_units = &apos;Gross&apos;)
                 AND (i_size = &apos;medium&apos;
                      OR i_size = &apos;extra large&apos;))
                OR (i_category = &apos;Women&apos;
                    AND (i_color = &apos;cyan&apos;
                         OR i_color = &apos;papaya&apos;)
                    AND (i_units = &apos;Cup&apos;
                         OR i_units = &apos;Dram&apos;)
                    AND (i_size = &apos;N/A&apos;
                         OR i_size = &apos;small&apos;))
                OR (i_category = &apos;Men&apos;
                    AND (i_color = &apos;orange&apos;
                         OR i_color = &apos;frosted&apos;)
                    AND (i_units = &apos;Each&apos;
                         OR i_units = &apos;Tbl&apos;)
                    AND (i_size = &apos;petite&apos;
                         OR i_size = &apos;large&apos;))
                OR (i_category = &apos;Men&apos;
                    AND (i_color = &apos;forest&apos;
                         OR i_color = &apos;ghost&apos;)
                    AND (i_units = &apos;Lb&apos;
                         OR i_units = &apos;Bundle&apos;)
                    AND (i_size = &apos;medium&apos;
                         OR i_size = &apos;extra large&apos;))))) &gt; 0
) AS a
ORDER BY i_product_name
OPTION (LABEL = &apos;q41&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q42" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q42.sql--

SELECT TOP 100 dt.d_year,
       TPCDS.item.i_category_id,
       TPCDS.item.i_category,
       sum(ss_ext_sales_price)
FROM TPCDS.date_dim dt,
     TPCDS.store_sales,
     TPCDS.item
WHERE dt.d_date_sk = TPCDS.store_sales.ss_sold_date_sk
  AND TPCDS.store_sales.ss_item_sk = TPCDS.item.i_item_sk
  AND TPCDS.item.i_manager_id = 1
  AND dt.d_moy=11
  AND dt.d_year=2000
GROUP BY dt.d_year ,
         TPCDS.item.i_category_id ,
         TPCDS.item.i_category
ORDER BY sum(ss_ext_sales_price) DESC,dt.d_year ,
                                      TPCDS.item.i_category_id ,
                                      TPCDS.item.i_category
OPTION (LABEL = &apos;q42&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q43" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q43.sql--

SELECT TOP 100 s_store_name,
       s_store_id,
       sum(CASE
               WHEN (d_day_name=&apos;Sunday&apos;) THEN ss_sales_price
               ELSE NULL
           END) sun_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Monday&apos;) THEN ss_sales_price
               ELSE NULL
           END) mon_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Tuesday&apos;) THEN ss_sales_price
               ELSE NULL
           END) tue_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Wednesday&apos;) THEN ss_sales_price
               ELSE NULL
           END) wed_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Thursday&apos;) THEN ss_sales_price
               ELSE NULL
           END) thu_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Friday&apos;) THEN ss_sales_price
               ELSE NULL
           END) fri_sales,
       sum(CASE
               WHEN (d_day_name=&apos;Saturday&apos;) THEN ss_sales_price
               ELSE NULL
           END) sat_sales
FROM TPCDS.date_dim,
     TPCDS.store_sales,
     TPCDS.store
WHERE d_date_sk = ss_sold_date_sk
  AND s_store_sk = ss_store_sk
  AND s_gmt_offset = -5
  AND d_year = 2000
GROUP BY s_store_name,
         s_store_id
ORDER BY s_store_name,
         s_store_id,
         sun_sales,
         mon_sales,
         tue_sales,
         wed_sales,
         thu_sales,
         fri_sales,
         sat_sales
OPTION (LABEL = &apos;q43&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q44" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q44.sql--

SELECT TOP 100 asceding.rnk,
       i1.i_product_name best_performing,
       i2.i_product_name worst_performing
FROM
  (SELECT *
   FROM
     (SELECT item_sk,
             rank() OVER (
                          ORDER BY rank_col ASC) rnk
      FROM
        (SELECT ss_item_sk item_sk,
                avg(ss_net_profit) rank_col
         FROM TPCDS.store_sales ss1
         WHERE ss_store_sk = 4
         GROUP BY ss_item_sk
         HAVING avg(ss_net_profit) &gt; 0.9*
           (SELECT avg(ss_net_profit) rank_col
            FROM TPCDS.store_sales
            WHERE ss_store_sk = 4
              AND ss_addr_sk IS NULL
            GROUP BY ss_store_sk))V1)V11
   WHERE rnk &lt; 11) asceding,

  (SELECT *
   FROM
     (SELECT item_sk,
             rank() OVER (
                          ORDER BY rank_col DESC) rnk
      FROM
        (SELECT ss_item_sk item_sk,
                avg(ss_net_profit) rank_col
         FROM TPCDS.store_sales ss1
         WHERE ss_store_sk = 4
         GROUP BY ss_item_sk
         HAVING avg(ss_net_profit) &gt; 0.9*
           (SELECT avg(ss_net_profit) rank_col
            FROM TPCDS.store_sales
            WHERE ss_store_sk = 4
              AND ss_addr_sk IS NULL
            GROUP BY ss_store_sk))V2)V21
   WHERE rnk &lt; 11) descending,
    TPCDS.item i1,
    TPCDS.item i2
WHERE asceding.rnk = descending.rnk
  AND i1.i_item_sk=asceding.item_sk
  AND i2.i_item_sk=descending.item_sk
ORDER BY asceding.rnk
OPTION (LABEL = &apos;q44&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q45" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q45.sql--

SELECT TOP 100 ca_zip,
       ca_city,
       sum(ws_sales_price)
FROM TPCDS.web_sales,
     TPCDS.customer,
     TPCDS.customer_address,
     TPCDS.date_dim,
     TPCDS.item
WHERE ws_bill_customer_sk = c_customer_sk
  AND c_current_addr_sk = ca_address_sk
  AND ws_item_sk = i_item_sk
  AND (SUBSTRING(ca_zip, 1, 5) IN (&apos;85669&apos;,
                                &apos;86197&apos;,
                                &apos;88274&apos;,
                                &apos;83405&apos;,
                                &apos;86475&apos;,
                                &apos;85392&apos;,
                                &apos;85460&apos;,
                                &apos;80348&apos;,
                                &apos;81792&apos;)
       OR i_item_id IN
         (SELECT i_item_id
          FROM TPCDS.item
          WHERE i_item_sk IN (2,
                              3,
                              5,
                              7,
                              11,
                              13,
                              17,
                              19,
                              23,
                              29) ))
  AND ws_sold_date_sk = d_date_sk
  AND d_qoy = 2
  AND d_year = 2001
GROUP BY ca_zip,
         ca_city
ORDER BY ca_zip,
         ca_city
OPTION (LABEL = &apos;q45&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q46" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q46.sql--

SELECT TOP 100 c_last_name,
       c_first_name,
       ca_city,
       bought_city,
       ss_ticket_number,
       amt,
       profit
FROM
  (SELECT ss_ticket_number ,
          ss_customer_sk ,
          ca_city bought_city ,
          sum(ss_coupon_amt) amt ,
          sum(ss_net_profit) profit
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store,
        TPCDS.household_demographics,
        TPCDS.customer_address
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_store_sk = TPCDS.store.s_store_sk
     AND TPCDS.store_sales.ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND TPCDS.store_sales.ss_addr_sk = TPCDS.customer_address.ca_address_sk
     AND (TPCDS.household_demographics.hd_dep_count = 4
          OR TPCDS.household_demographics.hd_vehicle_count= 3)
     AND TPCDS.date_dim.d_dow IN (6,
                                  0)
     AND TPCDS.date_dim.d_year IN (1999,
                                   1999+1,
                                   1999+2)
     AND TPCDS.store.s_city IN (&apos;Fairview&apos;,
                                &apos;Midway&apos;,
                                &apos;Fairview&apos;,
                                &apos;Fairview&apos;,
                                &apos;Fairview&apos;)
   GROUP BY ss_ticket_number,
            ss_customer_sk,
            ss_addr_sk,
            ca_city) dn,
     TPCDS.customer,
     TPCDS.customer_address current_addr
WHERE ss_customer_sk = c_customer_sk
  AND TPCDS.customer.c_current_addr_sk = current_addr.ca_address_sk
  AND current_addr.ca_city &lt;&gt; bought_city
ORDER BY c_last_name,
         c_first_name,
         ca_city,
         bought_city,
         ss_ticket_number
OPTION (LABEL = &apos;q46&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q47" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q47.sql--
 WITH v1 AS
  (SELECT i_category,
          i_brand,
          s_store_name,
          s_company_name,
          d_year,
          d_moy,
          sum(ss_sales_price) sum_sales,
          avg(sum(ss_sales_price)) OVER (PARTITION BY i_category,
                                                      i_brand,
                                                      s_store_name,
                                                      s_company_name,
                                                      d_year) avg_monthly_sales,
                                        rank() OVER (PARTITION BY i_category,
                                                                  i_brand,
                                                                  s_store_name,
                                                                  s_company_name
                                                     ORDER BY d_year,
                                                              d_moy) rn
   FROM TPCDS.item,
        TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store
   WHERE ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND (d_year = 1999
          OR (d_year = 1999-1
              AND d_moy =12)
          OR (d_year = 1999+1
              AND d_moy =1))
   GROUP BY i_category,
            i_brand,
            s_store_name,
            s_company_name,
            d_year,
            d_moy),
      v2 AS
  (SELECT v1.i_category,
          v1.i_brand,
          v1.s_store_name,
          v1.s_company_name,
          v1.d_year,
          v1.d_moy,
          v1.avg_monthly_sales,
          v1.sum_sales,
          v1_lag.sum_sales psum,
          v1_lead.sum_sales nsum
   FROM v1,
        v1 v1_lag,
        v1 v1_lead
   WHERE v1.i_category = v1_lag.i_category
     AND v1.i_category = v1_lead.i_category
     AND v1.i_brand = v1_lag.i_brand
     AND v1.i_brand = v1_lead.i_brand
     AND v1.s_store_name = v1_lag.s_store_name
     AND v1.s_store_name = v1_lead.s_store_name
     AND v1.s_company_name = v1_lag.s_company_name
     AND v1.s_company_name = v1_lead.s_company_name
     AND v1.rn = v1_lag.rn + 1
     AND v1.rn = v1_lead.rn - 1)
SELECT TOP 100 *
FROM v2
WHERE d_year = 1999
  AND avg_monthly_sales &gt; 0
  AND CASE
          WHEN avg_monthly_sales &gt; 0 THEN abs(sum_sales - avg_monthly_sales) / avg_monthly_sales
          ELSE NULL
      END &gt; 0.1
ORDER BY sum_sales - avg_monthly_sales,
         3
OPTION (LABEL = &apos;q47&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q48" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q48.sql--

SELECT SUM (ss_quantity)
FROM TPCDS.store_sales,
     TPCDS.store,
     TPCDS.customer_demographics,
     TPCDS.customer_address,
     TPCDS.date_dim
WHERE s_store_sk = ss_store_sk
  AND ss_sold_date_sk = d_date_sk
  AND d_year = 2000
  AND ((cd_demo_sk = ss_cdemo_sk
        AND cd_marital_status = &apos;M&apos;
        AND cd_education_status = &apos;4 yr Degree&apos;
        AND ss_sales_price BETWEEN 100.00 AND 150.00)
       OR (cd_demo_sk = ss_cdemo_sk
           AND cd_marital_status = &apos;D&apos;
           AND cd_education_status = &apos;2 yr Degree&apos;
           AND ss_sales_price BETWEEN 50.00 AND 100.00)
       OR (cd_demo_sk = ss_cdemo_sk
           AND cd_marital_status = &apos;S&apos;
           AND cd_education_status = &apos;College&apos;
           AND ss_sales_price BETWEEN 150.00 AND 200.00))
  AND ((ss_addr_sk = ca_address_sk
        AND ca_country = &apos;United States&apos;
        AND ca_state IN (&apos;CO&apos;,
                         &apos;OH&apos;,
                         &apos;TX&apos;)
        AND ss_net_profit BETWEEN 0 AND 2000)
       OR (ss_addr_sk = ca_address_sk
           AND ca_country = &apos;United States&apos;
           AND ca_state IN (&apos;OR&apos;,
                            &apos;MN&apos;,
                            &apos;KY&apos;)
           AND ss_net_profit BETWEEN 150 AND 3000)
       OR (ss_addr_sk = ca_address_sk
           AND ca_country = &apos;United States&apos;
           AND ca_state IN (&apos;VA&apos;,
                            &apos;CA&apos;,
                            &apos;MS&apos;)
           AND ss_net_profit BETWEEN 50 AND 25000))
OPTION (LABEL = &apos;q48&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q49" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q49.sql--
SELECT TOP 100 &apos;web&apos; AS channel
	,web.item
	,web.return_ratio
	,web.return_rank
	,web.currency_rank
FROM (
	SELECT item
		,return_ratio
		,currency_ratio
		,rank() OVER (
			ORDER BY return_ratio
			) AS return_rank
		,rank() OVER (
			ORDER BY currency_ratio
			) AS currency_rank
	FROM (
		SELECT ws.ws_item_sk AS item
			,(cast(sum(coalesce(wr.wr_return_quantity, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(ws.ws_quantity, 0)) AS DECIMAL(15, 4))) AS return_ratio
			,(cast(sum(coalesce(wr.wr_return_amt, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(ws.ws_net_paid, 0)) AS DECIMAL(15, 4))) AS currency_ratio
		FROM TPCDS.web_sales ws
		LEFT OUTER JOIN TPCDS.web_returns wr ON (
				ws.ws_order_number = wr.wr_order_number
				AND ws.ws_item_sk = wr.wr_item_sk
				)
			,TPCDS.date_dim
		WHERE wr.wr_return_amt &gt; 10000
			AND ws.ws_net_profit &gt; 1
			AND ws.ws_net_paid &gt; 0
			AND ws.ws_quantity &gt; 0
			AND ws_sold_date_sk = d_date_sk
			AND d_year = 2001
			AND d_moy = 12
		GROUP BY ws.ws_item_sk
		) in_web
	) web
WHERE (
		web.return_rank &lt;= 10
		OR web.currency_rank &lt;= 10
		)

UNION

SELECT &apos;catalog&apos; AS channel
	,CATALOG.item
	,CATALOG.return_ratio
	,CATALOG.return_rank
	,CATALOG.currency_rank
FROM (
	SELECT item
		,return_ratio
		,currency_ratio
		,rank() OVER (
			ORDER BY return_ratio
			) AS return_rank
		,rank() OVER (
			ORDER BY currency_ratio
			) AS currency_rank
	FROM (
		SELECT cs.cs_item_sk AS item
			,(cast(sum(coalesce(cr.cr_return_quantity, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(cs.cs_quantity, 0)) AS DECIMAL(15, 4))) AS return_ratio
			,(cast(sum(coalesce(cr.cr_return_amount, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(cs.cs_net_paid, 0)) AS DECIMAL(15, 4))) AS currency_ratio
		FROM TPCDS.catalog_sales cs
		LEFT OUTER JOIN TPCDS.catalog_returns cr ON (
				cs.cs_order_number = cr.cr_order_number
				AND cs.cs_item_sk = cr.cr_item_sk
				)
			,TPCDS.date_dim
		WHERE cr.cr_return_amount &gt; 10000
			AND cs.cs_net_profit &gt; 1
			AND cs.cs_net_paid &gt; 0
			AND cs.cs_quantity &gt; 0
			AND cs_sold_date_sk = d_date_sk
			AND d_year = 2001
			AND d_moy = 12
		GROUP BY cs.cs_item_sk
		) in_cat
	) CATALOG
WHERE (
		CATALOG.return_rank &lt;= 10
		OR CATALOG.currency_rank &lt;= 10
		)

UNION

SELECT &apos;store&apos; AS channel
	,store.item
	,store.return_ratio
	,store.return_rank
	,store.currency_rank
FROM (
	SELECT item
		,return_ratio
		,currency_ratio
		,rank() OVER (
			ORDER BY return_ratio
			) AS return_rank
		,rank() OVER (
			ORDER BY currency_ratio
			) AS currency_rank
	FROM (
		SELECT sts.ss_item_sk AS item
			,(cast(sum(coalesce(sr.sr_return_quantity, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(sts.ss_quantity, 0)) AS DECIMAL(15, 4))) AS return_ratio
			,(cast(sum(coalesce(sr.sr_return_amt, 0)) AS DECIMAL(15, 4)) / cast(sum(coalesce(sts.ss_net_paid, 0)) AS DECIMAL(15, 4))) AS currency_ratio
		FROM TPCDS.store_sales sts
		LEFT OUTER JOIN TPCDS.store_returns sr ON (
				sts.ss_ticket_number = sr.sr_ticket_number
				AND sts.ss_item_sk = sr.sr_item_sk
				)
			,TPCDS.date_dim
		WHERE sr.sr_return_amt &gt; 10000
			AND sts.ss_net_profit &gt; 1
			AND sts.ss_net_paid &gt; 0
			AND sts.ss_quantity &gt; 0
			AND ss_sold_date_sk = d_date_sk
			AND d_year = 2001
			AND d_moy = 12
		GROUP BY sts.ss_item_sk
		) in_store
	) store
WHERE (
		store.return_rank &lt;= 10
		OR store.currency_rank &lt;= 10
		)
ORDER BY 1
	,4
	,5
OPTION (LABEL = &apos;q49&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q50" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q50.sql--

SELECT TOP 100 s_store_name,
       s_company_id,
       s_street_number,
       s_street_name,
       s_street_type,
       s_suite_number,
       s_city,
       s_county,
       s_state,
       s_zip ,
       sum(CASE
               WHEN (sr_returned_date_sk - ss_sold_date_sk &lt;= 30) THEN 1
               ELSE 0
           END) AS [30 days] ,
       sum(CASE
               WHEN (sr_returned_date_sk - ss_sold_date_sk &gt; 30)
                    AND (sr_returned_date_sk - ss_sold_date_sk &lt;= 60) THEN 1
               ELSE 0
           END) AS [31-60 days] ,
       sum(CASE
               WHEN (sr_returned_date_sk - ss_sold_date_sk &gt; 60)
                    AND (sr_returned_date_sk - ss_sold_date_sk &lt;= 90) THEN 1
               ELSE 0
           END) AS [61-90 days] ,
       sum(CASE
               WHEN (sr_returned_date_sk - ss_sold_date_sk &gt; 90)
                    AND (sr_returned_date_sk - ss_sold_date_sk &lt;= 120) THEN 1
               ELSE 0
           END) AS [91-120 days] ,
       sum(CASE
               WHEN (sr_returned_date_sk - ss_sold_date_sk &gt; 120) THEN 1
               ELSE 0
           END) AS [&gt;120 days]
FROM TPCDS.store_sales,
     TPCDS.store_returns,
     TPCDS.store,
     TPCDS.date_dim d1,
     TPCDS.date_dim d2
WHERE d2.d_year = 2001
  AND d2.d_moy = 8
  AND ss_ticket_number = sr_ticket_number
  AND ss_item_sk = sr_item_sk
  AND ss_sold_date_sk = d1.d_date_sk
  AND sr_returned_date_sk = d2.d_date_sk
  AND ss_customer_sk = sr_customer_sk
  AND ss_store_sk = s_store_sk
GROUP BY s_store_name,
         s_company_id,
         s_street_number,
         s_street_name,
         s_street_type,
         s_suite_number,
         s_city,
         s_county,
         s_state,
         s_zip
ORDER BY s_store_name,
         s_company_id,
         s_street_number,
         s_street_name,
         s_street_type,
         s_suite_number,
         s_city,
         s_county,
         s_state,
         s_zip
OPTION (LABEL = &apos;q50&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q51" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q51.sql--
 WITH web_v1 AS
  (SELECT ws_item_sk item_sk,
          d_date,
          sum(sum(ws_sales_price)) OVER (PARTITION BY ws_item_sk
                                         ORDER BY d_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) cume_sales
   FROM TPCDS.web_sales,
        TPCDS.date_dim
   WHERE ws_sold_date_sk=d_date_sk
     AND d_month_seq BETWEEN 1200 AND 1200+11
     AND ws_item_sk IS NOT NULL
   GROUP BY ws_item_sk,
            d_date),
      store_v1 AS
  (SELECT ss_item_sk item_sk,
          d_date,
          sum(sum(ss_sales_price)) OVER (PARTITION BY ss_item_sk
                                         ORDER BY d_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) cume_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim
   WHERE ss_sold_date_sk=d_date_sk
     AND d_month_seq BETWEEN 1200 AND 1200+11
     AND ss_item_sk IS NOT NULL
   GROUP BY ss_item_sk,
            d_date)
SELECT TOP 100 *
FROM
  (SELECT item_sk,
          d_date,
          web_sales,
          store_sales ,
          max(web_sales) OVER (PARTITION BY item_sk
                                     ORDER BY d_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) web_cumulative ,
                                    max(store_sales) OVER (PARTITION BY item_sk
                                                                 ORDER BY d_date ROWS BETWEEN UNBOUNDED preceding AND CURRENT ROW) store_cumulative
   FROM
     (SELECT CASE
                 WHEN web.item_sk IS NOT NULL THEN web.item_sk
                 ELSE store.item_sk
             END item_sk ,
             CASE
                 WHEN web.d_date IS NOT NULL THEN web.d_date
                 ELSE store.d_date
             END d_date ,
             web.cume_sales web_sales ,
             store.cume_sales store_sales
      FROM web_v1 web
      FULL OUTER JOIN store_v1 store ON (web.item_sk = store.item_sk
                                               AND web.d_date = store.d_date))x)y
WHERE web_cumulative &gt; store_cumulative
ORDER BY item_sk,
         d_date
OPTION (LABEL = &apos;q51&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q52" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q52.sql--

SELECT TOP 100 dt.d_year ,
       TPCDS.item.i_brand_id brand_id ,
       TPCDS.item.i_brand brand ,
       sum(ss_ext_sales_price) ext_price
FROM TPCDS.date_dim dt,
     TPCDS.store_sales,
     TPCDS.item
WHERE dt.d_date_sk = TPCDS.store_sales.ss_sold_date_sk
  AND TPCDS.store_sales.ss_item_sk = TPCDS.item.i_item_sk
  AND TPCDS.item.i_manager_id = 1
  AND dt.d_moy=11
  AND dt.d_year=2000
GROUP BY dt.d_year,
         TPCDS.item.i_brand,
         TPCDS.item.i_brand_id
ORDER BY dt.d_year,
         ext_price DESC,
         brand_id
OPTION (LABEL = &apos;q52&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q53" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q53.sql--

SELECT TOP 100 *
FROM
  (SELECT i_manufact_id,
          sum(ss_sales_price) sum_sales,
          avg(sum(ss_sales_price)) OVER (PARTITION BY i_manufact_id) avg_quarterly_sales
   FROM TPCDS.item,
        TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store
   WHERE ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND d_month_seq IN (1200,
                         1200+1,
                         1200+2,
                         1200+3,
                         1200+4,
                         1200+5,
                         1200+6,
                         1200+7,
                         1200+8,
                         1200+9,
                         1200+10,
                         1200+11)
     AND ((i_category IN (&apos;Books&apos;,
                          &apos;Children&apos;,
                          &apos;Electronics&apos;)
           AND i_class IN (&apos;personal&apos;,
                           &apos;portable&apos;,
                           &apos;reference&apos;,
                           &apos;self-help&apos;)
           AND i_brand IN (&apos;scholaramalgamalg #14&apos;,
                           &apos;scholaramalgamalg #7&apos;,
                           &apos;exportiunivamalg #9&apos;,
                           &apos;scholaramalgamalg #9&apos;))
          OR (i_category IN (&apos;Women&apos;,
                             &apos;Music&apos;,
                             &apos;Men&apos;)
              AND i_class IN (&apos;accessories&apos;,
                              &apos;classical&apos;,
                              &apos;fragrances&apos;,
                              &apos;pants&apos;)
              AND i_brand IN (&apos;amalgimporto #1&apos;,
                              &apos;edu packscholar #1&apos;,
                              &apos;exportiimporto #1&apos;,
                              &apos;importoamalg #1&apos;)))
   GROUP BY i_manufact_id,
            d_qoy) tmp1
WHERE CASE
          WHEN avg_quarterly_sales &gt; 0 THEN ABS (sum_sales - avg_quarterly_sales)/ avg_quarterly_sales
          ELSE NULL
      END &gt; 0.1
ORDER BY avg_quarterly_sales,
         sum_sales,
         i_manufact_id
OPTION (LABEL = &apos;q53&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q54" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q54.sql--
 WITH my_customers AS
  (SELECT DISTINCT c_customer_sk ,
                   c_current_addr_sk
   FROM
     (SELECT cs_sold_date_sk sold_date_sk,
             cs_bill_customer_sk customer_sk,
             cs_item_sk item_sk
      FROM TPCDS.catalog_sales
      UNION ALL SELECT ws_sold_date_sk sold_date_sk,
                       ws_bill_customer_sk customer_sk,
                       ws_item_sk item_sk
      FROM TPCDS.web_sales) cs_or_ws_sales,
        TPCDS.item,
        TPCDS.date_dim,
        TPCDS.customer
   WHERE sold_date_sk = d_date_sk
     AND item_sk = i_item_sk
     AND i_category = &apos;Women&apos;
     AND i_class = &apos;maternity&apos;
     AND c_customer_sk = cs_or_ws_sales.customer_sk
     AND d_moy = 12
     AND d_year = 1998 ) ,
      my_revenue AS
  (SELECT c_customer_sk,
          sum(ss_ext_sales_price) AS revenue
   FROM my_customers,
        TPCDS.store_sales,
        TPCDS.customer_address,
        TPCDS.store,
        TPCDS.date_dim
   WHERE c_current_addr_sk = ca_address_sk
     AND ca_county = s_county
     AND ca_state = s_state
     AND ss_sold_date_sk = d_date_sk
     AND c_customer_sk = ss_customer_sk
     AND d_month_seq BETWEEN
       (SELECT DISTINCT d_month_seq+1
        FROM TPCDS.date_dim
        WHERE d_year = 1998
          AND d_moy = 12) AND
       (SELECT DISTINCT d_month_seq+3
        FROM TPCDS.date_dim
        WHERE d_year = 1998
          AND d_moy = 12)
   GROUP BY c_customer_sk) ,
      segments AS
  (SELECT cast((revenue/50) AS integer) AS SEGMENT
   FROM my_revenue)
SELECT TOP 100 SEGMENT,
       count(*) AS num_customers,
       SEGMENT*50 AS segment_base
FROM segments
GROUP BY SEGMENT
ORDER BY SEGMENT,
         num_customers
OPTION (LABEL = &apos;q54&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q55" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q55.sql--

SELECT TOP 100 i_brand_id brand_id,
       i_brand brand,
       sum(ss_ext_sales_price) ext_price
FROM TPCDS.date_dim,
     TPCDS.store_sales,
     TPCDS.item
WHERE d_date_sk = ss_sold_date_sk
  AND ss_item_sk = i_item_sk
  AND i_manager_id=28
  AND d_moy=11
  AND d_year=1999
GROUP BY i_brand,
         i_brand_id
ORDER BY ext_price DESC,
         brand_id
OPTION (LABEL = &apos;q55&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q56" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q56.sql--
 WITH ss AS
  (SELECT i_item_id,
          sum(ss_ext_sales_price) total_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_color IN (&apos;slate&apos;,
                          &apos;blanched&apos;,
                          &apos;burnished&apos;))
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_year = 2001
     AND d_moy = 2
     AND ss_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id),
      cs AS
  (SELECT i_item_id,
          sum(cs_ext_sales_price) total_sales
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_color IN (&apos;slate&apos;,
                          &apos;blanched&apos;,
                          &apos;burnished&apos;))
     AND cs_item_sk = i_item_sk
     AND cs_sold_date_sk = d_date_sk
     AND d_year = 2001
     AND d_moy = 2
     AND cs_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id),
      ws AS
  (SELECT i_item_id,
          sum(ws_ext_sales_price) total_sales
   FROM TPCDS.web_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_color IN (&apos;slate&apos;,
                          &apos;blanched&apos;,
                          &apos;burnished&apos;))
     AND ws_item_sk = i_item_sk
     AND ws_sold_date_sk = d_date_sk
     AND d_year = 2001
     AND d_moy = 2
     AND ws_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id)
SELECT TOP 100 i_item_id,
       sum(total_sales) total_sales
FROM
  (SELECT *
   FROM ss
   UNION ALL SELECT *
   FROM cs
   UNION ALL SELECT *
   FROM ws) tmp1
GROUP BY i_item_id
ORDER BY total_sales
OPTION (LABEL = &apos;q56&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q57" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q57.sql--
 WITH v1 AS
  (SELECT i_category,
          i_brand,
          cc_name,
          d_year,
          d_moy,
          sum(cs_sales_price) sum_sales,
          avg(sum(cs_sales_price)) OVER (PARTITION BY i_category,
                                                      i_brand,
                                                      cc_name,
                                                      d_year) avg_monthly_sales,
                                        rank() OVER (PARTITION BY i_category,
                                                                  i_brand,
                                                                  cc_name
                                                     ORDER BY d_year,
                                                              d_moy) rn
   FROM TPCDS.item,
        TPCDS.catalog_sales,
        TPCDS.date_dim,
        TPCDS.call_center
   WHERE cs_item_sk = i_item_sk
     AND cs_sold_date_sk = d_date_sk
     AND cc_call_center_sk= cs_call_center_sk
     AND (d_year = 1999
          OR (d_year = 1999-1
              AND d_moy =12)
          OR (d_year = 1999+1
              AND d_moy =1))
   GROUP BY i_category,
            i_brand,
            cc_name,
            d_year,
            d_moy),
      v2 AS
  (SELECT v1.i_category,
          v1.i_brand,
          v1.cc_name,
          v1.d_year,
          v1.d_moy ,
          v1.avg_monthly_sales ,
          v1.sum_sales,
          v1_lag.sum_sales psum,
          v1_lead.sum_sales nsum
   FROM v1,
        v1 v1_lag,
        v1 v1_lead
   WHERE v1.i_category = v1_lag.i_category
     AND v1.i_category = v1_lead.i_category
     AND v1.i_brand = v1_lag.i_brand
     AND v1.i_brand = v1_lead.i_brand
     AND v1. cc_name = v1_lag. cc_name
     AND v1. cc_name = v1_lead. cc_name
     AND v1.rn = v1_lag.rn + 1
     AND v1.rn = v1_lead.rn - 1)
SELECT TOP 100 *
FROM v2
WHERE d_year = 1999
  AND avg_monthly_sales &gt; 0
  AND CASE
          WHEN avg_monthly_sales &gt; 0 THEN abs(sum_sales - avg_monthly_sales) / avg_monthly_sales
          ELSE NULL
      END &gt; 0.1
ORDER BY sum_sales - avg_monthly_sales,
         3
OPTION (LABEL = &apos;q57&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q58" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q58.sql--
 WITH ss_items AS
  (SELECT i_item_id item_id,
          sum(ss_ext_sales_price) ss_item_rev
   FROM TPCDS.store_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ss_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq =
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date = cast(&apos;2000-01-03&apos; AS date)))
     AND ss_sold_date_sk = d_date_sk
   GROUP BY i_item_id),
      cs_items AS
  (SELECT i_item_id item_id ,
          sum(cs_ext_sales_price) cs_item_rev
   FROM TPCDS.catalog_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE cs_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq =
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date = cast(&apos;2000-01-03&apos; AS date)))
     AND cs_sold_date_sk = d_date_sk
   GROUP BY i_item_id),
      ws_items AS
  (SELECT i_item_id item_id,
          sum(ws_ext_sales_price) ws_item_rev
   FROM TPCDS.web_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ws_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq =
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date = cast(&apos;2000-01-03&apos; AS date)))
     AND ws_sold_date_sk = d_date_sk
   GROUP BY i_item_id)
SELECT TOP 100 ss_items.item_id ,
       ss_item_rev ,
       ss_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ss_dev ,
       cs_item_rev ,
       cs_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 cs_dev ,
       ws_item_rev ,
       ws_item_rev/(ss_item_rev+cs_item_rev+ws_item_rev)/3 * 100 ws_dev ,
       (ss_item_rev+cs_item_rev+ws_item_rev)/3 average
FROM ss_items,
     cs_items,
     ws_items
WHERE ss_items.item_id=cs_items.item_id
  AND ss_items.item_id=ws_items.item_id
  AND ss_item_rev BETWEEN 0.9 * cs_item_rev AND 1.1 * cs_item_rev
  AND ss_item_rev BETWEEN 0.9 * ws_item_rev AND 1.1 * ws_item_rev
  AND cs_item_rev BETWEEN 0.9 * ss_item_rev AND 1.1 * ss_item_rev
  AND cs_item_rev BETWEEN 0.9 * ws_item_rev AND 1.1 * ws_item_rev
  AND ws_item_rev BETWEEN 0.9 * ss_item_rev AND 1.1 * ss_item_rev
  AND ws_item_rev BETWEEN 0.9 * cs_item_rev AND 1.1 * cs_item_rev
ORDER BY ss_items.item_id,
         ss_item_rev
OPTION (LABEL = &apos;q58&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q59" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q59.sql--
 WITH wss AS
  (SELECT d_week_seq,
          ss_store_sk,
          sum(CASE
                  WHEN (d_day_name=&apos;Sunday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) sun_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Monday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) mon_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Tuesday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) tue_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Wednesday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) wed_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Thursday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) thu_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Friday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) fri_sales,
          sum(CASE
                  WHEN (d_day_name=&apos;Saturday&apos;) THEN ss_sales_price
                  ELSE NULL
              END) sat_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim
   WHERE d_date_sk = ss_sold_date_sk
   GROUP BY d_week_seq,
            ss_store_sk)
SELECT TOP 100 s_store_name1,
       s_store_id1,
       d_week_seq1 ,
       sun_sales1/sun_sales2,
       mon_sales1/mon_sales2 ,
       tue_sales1/tue_sales2,
       wed_sales1/wed_sales2,
       thu_sales1/thu_sales2 ,
       fri_sales1/fri_sales2,
       sat_sales1/sat_sales2
FROM
  (SELECT s_store_name s_store_name1,
          wss.d_week_seq d_week_seq1 ,
          s_store_id s_store_id1,
          sun_sales sun_sales1 ,
          mon_sales mon_sales1,
          tue_sales tue_sales1 ,
          wed_sales wed_sales1,
          thu_sales thu_sales1 ,
          fri_sales fri_sales1,
          sat_sales sat_sales1
   FROM wss,
        TPCDS.store,
        TPCDS.date_dim d
   WHERE d.d_week_seq = wss.d_week_seq
     AND ss_store_sk = s_store_sk
     AND d_month_seq BETWEEN 1212 AND 1212 + 11) y,

  (SELECT s_store_name s_store_name2,
          wss.d_week_seq d_week_seq2 ,
          s_store_id s_store_id2,
          sun_sales sun_sales2 ,
          mon_sales mon_sales2,
          tue_sales tue_sales2 ,
          wed_sales wed_sales2,
          thu_sales thu_sales2 ,
          fri_sales fri_sales2,
          sat_sales sat_sales2
   FROM wss,
        TPCDS.store,
        TPCDS.date_dim d
   WHERE d.d_week_seq = wss.d_week_seq
     AND ss_store_sk = s_store_sk
     AND d_month_seq BETWEEN 1212+ 12 AND 1212 + 23) x
WHERE s_store_id1=s_store_id2
  AND d_week_seq1=d_week_seq2-52
ORDER BY s_store_name1,
         s_store_id1,
         d_week_seq1
OPTION (LABEL = &apos;q59&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q60" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q60.sql--
 WITH ss AS
  (SELECT i_item_id,
          sum(ss_ext_sales_price) total_sales
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Music&apos;))
     AND ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 9
     AND ss_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id),
      cs AS
  (SELECT i_item_id,
          sum(cs_ext_sales_price) total_sales
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Music&apos;))
     AND cs_item_sk = i_item_sk
     AND cs_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 9
     AND cs_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id),
      ws AS
  (SELECT i_item_id,
          sum(ws_ext_sales_price) total_sales
   FROM TPCDS.web_sales,
        TPCDS.date_dim,
        TPCDS.customer_address,
        TPCDS.item
   WHERE i_item_id IN
       (SELECT i_item_id
        FROM TPCDS.item
        WHERE i_category IN (&apos;Music&apos;))
     AND ws_item_sk = i_item_sk
     AND ws_sold_date_sk = d_date_sk
     AND d_year = 1998
     AND d_moy = 9
     AND ws_bill_addr_sk = ca_address_sk
     AND ca_gmt_offset = -5
   GROUP BY i_item_id)
SELECT TOP 100 i_item_id,
       sum(total_sales) total_sales
FROM
  (SELECT *
   FROM ss
   UNION ALL SELECT *
   FROM cs
   UNION ALL SELECT *
   FROM ws) tmp1
GROUP BY i_item_id
ORDER BY i_item_id,
         total_sales
OPTION (LABEL = &apos;q60&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q61" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q61.sql--

SELECT TOP 100 promotions,
       total,
       cast(promotions AS decimal(15, 4))/cast(total AS decimal(15, 4))*100
FROM
  (SELECT sum(ss_ext_sales_price) promotions
   FROM TPCDS.store_sales,
        TPCDS.store,
        TPCDS.promotion,
        TPCDS.date_dim,
        TPCDS.customer,
        TPCDS.customer_address,
        TPCDS.item
   WHERE ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND ss_promo_sk = p_promo_sk
     AND ss_customer_sk= c_customer_sk
     AND ca_address_sk = c_current_addr_sk
     AND ss_item_sk = i_item_sk
     AND ca_gmt_offset = -5
     AND i_category = &apos;Jewelry&apos;
     AND (p_channel_dmail = &apos;Y&apos;
          OR p_channel_email = &apos;Y&apos;
          OR p_channel_tv = &apos;Y&apos;)
     AND s_gmt_offset = -5
     AND d_year = 1998
     AND d_moy = 11) promotional_sales
CROSS JOIN
  (SELECT sum(ss_ext_sales_price) total
   FROM TPCDS.store_sales,
        TPCDS.store,
        TPCDS.date_dim,
        TPCDS.customer,
        TPCDS.customer_address,
        TPCDS.item
   WHERE ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND ss_customer_sk= c_customer_sk
     AND ca_address_sk = c_current_addr_sk
     AND ss_item_sk = i_item_sk
     AND ca_gmt_offset = -5
     AND i_category = &apos;Jewelry&apos;
     AND s_gmt_offset = -5
     AND d_year = 1998
     AND d_moy = 11) all_sales
ORDER BY promotions,
         total
OPTION (LABEL = &apos;q61&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q62" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q62.sql--

SELECT TOP 100 SUBSTRING(w_warehouse_name, 1, 20) ,
       sm_type ,
       web_name ,
       sum(CASE
               WHEN (ws_ship_date_sk - ws_sold_date_sk &lt;= 30) THEN 1
               ELSE 0
           END) AS [30 days] ,
       sum(CASE
               WHEN (ws_ship_date_sk - ws_sold_date_sk &gt; 30)
                    AND (ws_ship_date_sk - ws_sold_date_sk &lt;= 60) THEN 1
               ELSE 0
           END) AS [31-60 days] ,
       sum(CASE
               WHEN (ws_ship_date_sk - ws_sold_date_sk &gt; 60)
                    AND (ws_ship_date_sk - ws_sold_date_sk &lt;= 90) THEN 1
               ELSE 0
           END) AS [61-90 days] ,
       sum(CASE
               WHEN (ws_ship_date_sk - ws_sold_date_sk &gt; 90)
                    AND (ws_ship_date_sk - ws_sold_date_sk &lt;= 120) THEN 1
               ELSE 0
           END) AS [91-120 days] ,
       sum(CASE
               WHEN (ws_ship_date_sk - ws_sold_date_sk &gt; 120) THEN 1
               ELSE 0
           END) AS [&gt;120 days]
FROM TPCDS.web_sales,
     TPCDS.warehouse,
     TPCDS.ship_mode,
     TPCDS.web_site,
     TPCDS.date_dim
WHERE d_month_seq BETWEEN 1200 AND 1200 + 11
  AND ws_ship_date_sk = d_date_sk
  AND ws_warehouse_sk = w_warehouse_sk
  AND ws_ship_mode_sk = sm_ship_mode_sk
  AND ws_web_site_sk = web_site_sk
GROUP BY SUBSTRING(w_warehouse_name, 1, 20),
         sm_type,
         web_name
ORDER BY SUBSTRING(w_warehouse_name, 1, 20),
         sm_type,
         web_name
OPTION (LABEL = &apos;q62&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q63" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q63.sql--

SELECT TOP 100 *
FROM
  (SELECT i_manager_id ,
          sum(ss_sales_price) sum_sales ,
          avg(sum(ss_sales_price)) OVER (PARTITION BY i_manager_id) avg_monthly_sales
   FROM TPCDS.item ,
        TPCDS.store_sales ,
        TPCDS.date_dim ,
        TPCDS.store
   WHERE ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND d_month_seq IN (1200,
                         1200+1,
                         1200+2,
                         1200+3,
                         1200+4,
                         1200+5,
                         1200+6,
                         1200+7,
                         1200+8,
                         1200+9,
                         1200+10,
                         1200+11)
     AND ((i_category IN (&apos;Books&apos;,
                          &apos;Children&apos;,
                          &apos;Electronics&apos;)
           AND i_class IN (&apos;personal&apos;,
                           &apos;portable&apos;,
                           &apos;reference&apos;,
                           &apos;self-help&apos;)
           AND i_brand IN (&apos;scholaramalgamalg #14&apos;,
                           &apos;scholaramalgamalg #7&apos;,
                           &apos;exportiunivamalg #9&apos;,
                           &apos;scholaramalgamalg #9&apos;)) or(i_category IN (&apos;Women&apos;, &apos;Music&apos;, &apos;Men&apos;)
                                                       AND i_class IN (&apos;accessories&apos;, &apos;classical&apos;, &apos;fragrances&apos;, &apos;pants&apos;)
                                                       AND i_brand IN (&apos;amalgimporto #1&apos;, &apos;edu packscholar #1&apos;, &apos;exportiimporto #1&apos;, &apos;importoamalg #1&apos;)))
   GROUP BY i_manager_id,
            d_moy) tmp1
WHERE CASE
          WHEN avg_monthly_sales &gt; 0 THEN ABS (sum_sales - avg_monthly_sales) / avg_monthly_sales
          ELSE NULL
      END &gt; 0.1
ORDER BY i_manager_id ,
         avg_monthly_sales ,
         sum_sales
OPTION (LABEL = &apos;q63&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q64" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q64.sql--
 WITH cs_ui AS
  (SELECT cs_item_sk ,
          sum(cs_ext_list_price) AS sale,
          sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit) AS refund
   FROM TPCDS.catalog_sales ,
        TPCDS.catalog_returns
   WHERE cs_item_sk = cr_item_sk
     AND cs_order_number = cr_order_number
   GROUP BY cs_item_sk
   HAVING sum(cs_ext_list_price)&gt;2*sum(cr_refunded_cash+cr_reversed_charge+cr_store_credit)),
      cross_sales AS
  (SELECT i_product_name product_name,
          i_item_sk item_sk,
          s_store_name store_name,
          s_zip store_zip,
          ad1.ca_street_number b_street_number,
          ad1.ca_street_name b_streen_name,
          ad1.ca_city b_city,
          ad1.ca_zip b_zip,
          ad2.ca_street_number c_street_number,
          ad2.ca_street_name c_street_name,
          ad2.ca_city c_city,
          ad2.ca_zip c_zip,
          d1.d_year AS syear,
          d2.d_year AS fsyear,
          d3.d_year s2year,
          count(*) cnt,
          sum(ss_wholesale_cost) s1,
          sum(ss_list_price) s2,
          sum(ss_coupon_amt) s3
   FROM TPCDS.store_sales,
        TPCDS.store_returns,
        cs_ui,
        TPCDS.date_dim d1,
        TPCDS.date_dim d2,
        TPCDS.date_dim d3,
        TPCDS.store,
        TPCDS.customer,
        TPCDS.customer_demographics cd1,
        TPCDS.customer_demographics cd2,
        TPCDS.promotion,
        TPCDS.household_demographics hd1,
        TPCDS.household_demographics hd2,
        TPCDS.customer_address ad1,
        TPCDS.customer_address ad2,
        TPCDS.income_band ib1,
        TPCDS.income_band ib2,
        TPCDS.item
   WHERE ss_store_sk = s_store_sk
     AND ss_sold_date_sk = d1.d_date_sk
     AND ss_customer_sk = c_customer_sk
     AND ss_cdemo_sk= cd1.cd_demo_sk
     AND ss_hdemo_sk = hd1.hd_demo_sk
     AND ss_addr_sk = ad1.ca_address_sk
     AND ss_item_sk = i_item_sk
     AND ss_item_sk = sr_item_sk
     AND ss_ticket_number = sr_ticket_number
     AND ss_item_sk = cs_ui.cs_item_sk
     AND c_current_cdemo_sk = cd2.cd_demo_sk
     AND c_current_hdemo_sk = hd2.hd_demo_sk
     AND c_current_addr_sk = ad2.ca_address_sk
     AND c_first_sales_date_sk = d2.d_date_sk
     AND c_first_shipto_date_sk = d3.d_date_sk
     AND ss_promo_sk = p_promo_sk
     AND hd1.hd_income_band_sk = ib1.ib_income_band_sk
     AND hd2.hd_income_band_sk = ib2.ib_income_band_sk
     AND cd1.cd_marital_status &lt;&gt; cd2.cd_marital_status
     AND i_color IN (&apos;purple&apos;,
                     &apos;burlywood&apos;,
                     &apos;indian&apos;,
                     &apos;spring&apos;,
                     &apos;floral&apos;,
                     &apos;medium&apos;)
     AND i_current_price BETWEEN 64 AND 64 + 10
     AND i_current_price BETWEEN 64 + 1 AND 64 + 15
   GROUP BY i_product_name,
            i_item_sk,
            s_store_name,
            s_zip,
            ad1.ca_street_number,
            ad1.ca_street_name,
            ad1.ca_city,
            ad1.ca_zip,
            ad2.ca_street_number,
            ad2.ca_street_name,
            ad2.ca_city,
            ad2.ca_zip,
            d1.d_year,
            d2.d_year,
            d3.d_year)
SELECT cs1.product_name,
       cs1.store_name,
       cs1.store_zip,
       cs1.b_street_number,
       cs1.b_streen_name,
       cs1.b_city,
       cs1.b_zip,
       cs1.c_street_number,
       cs1.c_street_name,
       cs1.c_city,
       cs1.c_zip,
       cs1.syear,
       cs1.cnt,
       cs1.s1,
       cs1.s2,
       cs1.s3,
       cs2.s1,
       cs2.s2,
       cs2.s3,
       cs2.syear,
       cs2.cnt
FROM cross_sales cs1,
     cross_sales cs2
WHERE cs1.item_sk=cs2.item_sk
  AND cs1.syear = 1999
  AND cs2.syear = 1999 + 1
  AND cs2.cnt &lt;= cs1.cnt
  AND cs1.store_name = cs2.store_name
  AND cs1.store_zip = cs2.store_zip
ORDER BY cs1.product_name,
         cs1.store_name,
         cs2.cnt
OPTION (LABEL = &apos;q64&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q65" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q65.sql--

SELECT TOP 100 s_store_name,
       i_item_desc,
       sc.revenue,
       i_current_price,
       i_wholesale_cost,
       i_brand
FROM TPCDS.store,
     TPCDS.item,

  (SELECT ss_store_sk,
          avg(revenue) AS ave
   FROM
     (SELECT ss_store_sk,
             ss_item_sk,
             sum(ss_sales_price) AS revenue
      FROM TPCDS.store_sales,
           TPCDS.date_dim
      WHERE ss_sold_date_sk = d_date_sk
        AND d_month_seq BETWEEN 1176 AND 1176+11
      GROUP BY ss_store_sk,
               ss_item_sk) sa
   GROUP BY ss_store_sk) sb,

  (SELECT ss_store_sk,
          ss_item_sk,
          sum(ss_sales_price) AS revenue
   FROM TPCDS.store_sales,
        TPCDS.date_dim
   WHERE ss_sold_date_sk = d_date_sk
     AND d_month_seq BETWEEN 1176 AND 1176+11
   GROUP BY ss_store_sk,
            ss_item_sk) sc
WHERE sb.ss_store_sk = sc.ss_store_sk
  AND sc.revenue &lt;= 0.1 * sb.ave
  AND s_store_sk = sc.ss_store_sk
  AND i_item_sk = sc.ss_item_sk
ORDER BY s_store_name,
         i_item_desc
OPTION (LABEL = &apos;q65&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q66" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q66.sql--

SELECT TOP 100 w_warehouse_name,
       w_warehouse_sq_ft,
       w_city,
       w_county,
       w_state,
       w_country,
       ship_carriers,
       YEAR ,
       sum(jan_sales) AS jan_sales ,
       sum(feb_sales) AS feb_sales ,
       sum(mar_sales) AS mar_sales ,
       sum(apr_sales) AS apr_sales ,
       sum(may_sales) AS may_sales ,
       sum(jun_sales) AS jun_sales ,
       sum(jul_sales) AS jul_sales ,
       sum(aug_sales) AS aug_sales ,
       sum(sep_sales) AS sep_sales ,
       sum(oct_sales) AS oct_sales ,
       sum(nov_sales) AS nov_sales ,
       sum(dec_sales) AS dec_sales ,
       sum(jan_sales/w_warehouse_sq_ft) AS jan_sales_per_sq_foot ,
       sum(feb_sales/w_warehouse_sq_ft) AS feb_sales_per_sq_foot ,
       sum(mar_sales/w_warehouse_sq_ft) AS mar_sales_per_sq_foot ,
       sum(apr_sales/w_warehouse_sq_ft) AS apr_sales_per_sq_foot ,
       sum(may_sales/w_warehouse_sq_ft) AS may_sales_per_sq_foot ,
       sum(jun_sales/w_warehouse_sq_ft) AS jun_sales_per_sq_foot ,
       sum(jul_sales/w_warehouse_sq_ft) AS jul_sales_per_sq_foot ,
       sum(aug_sales/w_warehouse_sq_ft) AS aug_sales_per_sq_foot ,
       sum(sep_sales/w_warehouse_sq_ft) AS sep_sales_per_sq_foot ,
       sum(oct_sales/w_warehouse_sq_ft) AS oct_sales_per_sq_foot ,
       sum(nov_sales/w_warehouse_sq_ft) AS nov_sales_per_sq_foot ,
       sum(dec_sales/w_warehouse_sq_ft) AS dec_sales_per_sq_foot ,
       sum(jan_net) AS jan_net ,
       sum(feb_net) AS feb_net ,
       sum(mar_net) AS mar_net ,
       sum(apr_net) AS apr_net ,
       sum(may_net) AS may_net ,
       sum(jun_net) AS jun_net ,
       sum(jul_net) AS jul_net ,
       sum(aug_net) AS aug_net ,
       sum(sep_net) AS sep_net ,
       sum(oct_net) AS oct_net ,
       sum(nov_net) AS nov_net ,
       sum(dec_net) AS dec_net
FROM (
        (SELECT w_warehouse_name,
                w_warehouse_sq_ft,
                w_city,
                w_county,
                w_state,
                w_country ,
                concat(&apos;DHL&apos;, &apos;,&apos;, &apos;BARIAN&apos;) AS ship_carriers ,
                d_year AS YEAR ,
                sum(CASE
                        WHEN d_moy = 1 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS jan_sales ,
                sum(CASE
                        WHEN d_moy = 2 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS feb_sales ,
                sum(CASE
                        WHEN d_moy = 3 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS mar_sales ,
                sum(CASE
                        WHEN d_moy = 4 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS apr_sales ,
                sum(CASE
                        WHEN d_moy = 5 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS may_sales ,
                sum(CASE
                        WHEN d_moy = 6 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS jun_sales ,
                sum(CASE
                        WHEN d_moy = 7 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS jul_sales ,
                sum(CASE
                        WHEN d_moy = 8 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS aug_sales ,
                sum(CASE
                        WHEN d_moy = 9 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS sep_sales ,
                sum(CASE
                        WHEN d_moy = 10 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS oct_sales ,
                sum(CASE
                        WHEN d_moy = 11 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS nov_sales ,
                sum(CASE
                        WHEN d_moy = 12 THEN ws_ext_sales_price * ws_quantity
                        ELSE 0
                    END) AS dec_sales ,
                sum(CASE
                        WHEN d_moy = 1 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS jan_net ,
                sum(CASE
                        WHEN d_moy = 2 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS feb_net ,
                sum(CASE
                        WHEN d_moy = 3 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS mar_net ,
                sum(CASE
                        WHEN d_moy = 4 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS apr_net ,
                sum(CASE
                        WHEN d_moy = 5 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS may_net ,
                sum(CASE
                        WHEN d_moy = 6 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS jun_net ,
                sum(CASE
                        WHEN d_moy = 7 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS jul_net ,
                sum(CASE
                        WHEN d_moy = 8 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS aug_net ,
                sum(CASE
                        WHEN d_moy = 9 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS sep_net ,
                sum(CASE
                        WHEN d_moy = 10 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS oct_net ,
                sum(CASE
                        WHEN d_moy = 11 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS nov_net ,
                sum(CASE
                        WHEN d_moy = 12 THEN ws_net_paid * ws_quantity
                        ELSE 0
                    END) AS dec_net
         FROM TPCDS.web_sales,
              TPCDS.warehouse,
              TPCDS.date_dim,
              TPCDS.time_dim,
              TPCDS.ship_mode
         WHERE ws_warehouse_sk = w_warehouse_sk
           AND ws_sold_date_sk = d_date_sk
           AND ws_sold_time_sk = t_time_sk
           AND ws_ship_mode_sk = sm_ship_mode_sk
           AND d_year = 2001
           AND t_time BETWEEN 30838 AND 30838+28800
           AND sm_carrier IN (&apos;DHL&apos;,
                              &apos;BARIAN&apos;)
         GROUP BY w_warehouse_name,
                  w_warehouse_sq_ft,
                  w_city,
                  w_county,
                  w_state,
                  w_country,
                  d_year)
      UNION ALL
        (SELECT w_warehouse_name,
                w_warehouse_sq_ft,
                w_city,
                w_county,
                w_state,
                w_country ,
                concat(&apos;DHL&apos;, &apos;,&apos;, &apos;BARIAN&apos;) AS ship_carriers ,
                d_year AS YEAR ,
                sum(CASE
                        WHEN d_moy = 1 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS jan_sales ,
                sum(CASE
                        WHEN d_moy = 2 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS feb_sales ,
                sum(CASE
                        WHEN d_moy = 3 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS mar_sales ,
                sum(CASE
                        WHEN d_moy = 4 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS apr_sales ,
                sum(CASE
                        WHEN d_moy = 5 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS may_sales ,
                sum(CASE
                        WHEN d_moy = 6 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS jun_sales ,
                sum(CASE
                        WHEN d_moy = 7 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS jul_sales ,
                sum(CASE
                        WHEN d_moy = 8 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS aug_sales ,
                sum(CASE
                        WHEN d_moy = 9 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS sep_sales ,
                sum(CASE
                        WHEN d_moy = 10 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS oct_sales ,
                sum(CASE
                        WHEN d_moy = 11 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS nov_sales ,
                sum(CASE
                        WHEN d_moy = 12 THEN cs_sales_price * cs_quantity
                        ELSE 0
                    END) AS dec_sales ,
                sum(CASE
                        WHEN d_moy = 1 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS jan_net ,
                sum(CASE
                        WHEN d_moy = 2 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS feb_net ,
                sum(CASE
                        WHEN d_moy = 3 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS mar_net ,
                sum(CASE
                        WHEN d_moy = 4 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS apr_net ,
                sum(CASE
                        WHEN d_moy = 5 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS may_net ,
                sum(CASE
                        WHEN d_moy = 6 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS jun_net ,
                sum(CASE
                        WHEN d_moy = 7 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS jul_net ,
                sum(CASE
                        WHEN d_moy = 8 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS aug_net ,
                sum(CASE
                        WHEN d_moy = 9 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS sep_net ,
                sum(CASE
                        WHEN d_moy = 10 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS oct_net ,
                sum(CASE
                        WHEN d_moy = 11 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS nov_net ,
                sum(CASE
                        WHEN d_moy = 12 THEN cs_net_paid_inc_tax * cs_quantity
                        ELSE 0
                    END) AS dec_net
         FROM TPCDS.catalog_sales,
              TPCDS.warehouse,
              TPCDS.date_dim,
              TPCDS.time_dim,
              TPCDS.ship_mode
         WHERE cs_warehouse_sk = w_warehouse_sk
           AND cs_sold_date_sk = d_date_sk
           AND cs_sold_time_sk = t_time_sk
           AND cs_ship_mode_sk = sm_ship_mode_sk
           AND d_year = 2001
           AND t_time BETWEEN 30838 AND 30838+28800
           AND sm_carrier IN (&apos;DHL&apos;,
                              &apos;BARIAN&apos;)
         GROUP BY w_warehouse_name,
                  w_warehouse_sq_ft,
                  w_city,
                  w_county,
                  w_state,
                  w_country,
                  d_year)) x
GROUP BY w_warehouse_name,
         w_warehouse_sq_ft,
         w_city,
         w_county,
         w_state,
         w_country,
         ship_carriers,
         YEAR
ORDER BY w_warehouse_name
OPTION (LABEL = &apos;q66&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q67" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q67.sql--

SELECT TOP 100 *
FROM
  (SELECT i_category,
          i_class,
          i_brand,
          i_product_name,
          d_year,
          d_qoy,
          d_moy,
          s_store_id,
          sumsales,
          rank() OVER (PARTITION BY i_category
                       ORDER BY sumsales DESC) rk
   FROM
     (SELECT i_category,
             i_class,
             i_brand,
             i_product_name,
             d_year,
             d_qoy,
             d_moy,
             s_store_id,
             sum(coalesce(ss_sales_price*ss_quantity, 0)) sumsales
      FROM TPCDS.store_sales,
           TPCDS.date_dim,
           TPCDS.store,
           TPCDS.item
      WHERE ss_sold_date_sk=d_date_sk
        AND ss_item_sk=i_item_sk
        AND ss_store_sk = s_store_sk
        AND d_month_seq BETWEEN 1200 AND 1200+11
      GROUP BY rollup(i_category, i_class, i_brand, i_product_name, d_year, d_qoy, d_moy, s_store_id))dw1) dw2
WHERE rk &lt;= 100
ORDER BY i_category,
         i_class,
         i_brand,
         i_product_name,
         d_year,
         d_qoy,
         d_moy,
         s_store_id,
         sumsales,
         rk
OPTION (LABEL = &apos;q67&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q68" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q68.sql--

SELECT TOP 100 c_last_name,
       c_first_name,
       ca_city,
       bought_city,
       ss_ticket_number,
       extended_price,
       extended_tax,
       list_price
FROM
  (SELECT ss_ticket_number,
          ss_customer_sk,
          ca_city bought_city,
          sum(ss_ext_sales_price) extended_price,
          sum(ss_ext_list_price) list_price,
          sum(ss_ext_tax) extended_tax
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store,
        TPCDS.household_demographics,
        TPCDS.customer_address
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_store_sk = TPCDS.store.s_store_sk
     AND TPCDS.store_sales.ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND TPCDS.store_sales.ss_addr_sk = TPCDS.customer_address.ca_address_sk
     AND TPCDS.date_dim.d_dom BETWEEN 1 AND 2
     AND (TPCDS.household_demographics.hd_dep_count = 4
          OR TPCDS.household_demographics.hd_vehicle_count = 3)
     AND TPCDS.date_dim.d_year IN (1999,
                                   1999+1,
                                   1999+2)
     AND TPCDS.store.s_city IN (&apos;Midway&apos;,
                                &apos;Fairview&apos;)
   GROUP BY ss_ticket_number,
            ss_customer_sk,
            ss_addr_sk,
            ca_city) dn,
     TPCDS.customer,
     TPCDS.customer_address current_addr
WHERE ss_customer_sk = c_customer_sk
  AND TPCDS.customer.c_current_addr_sk = current_addr.ca_address_sk
  AND current_addr.ca_city &lt;&gt; bought_city
ORDER BY c_last_name,
         ss_ticket_number
OPTION (LABEL = &apos;q68&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q69" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q69.sql--

SELECT TOP 100 cd_gender,
       cd_marital_status,
       cd_education_status,
       count(*) cnt1,
       cd_purchase_estimate,
       count(*) cnt2,
       cd_credit_rating,
       count(*) cnt3
FROM TPCDS.customer c,
     TPCDS.customer_address ca,
     TPCDS.customer_demographics
WHERE c.c_current_addr_sk = ca.ca_address_sk
  AND ca_state IN (&apos;KY&apos;,
                   &apos;GA&apos;,
                   &apos;NM&apos;)
  AND cd_demo_sk = c.c_current_cdemo_sk
  AND EXISTS
    (SELECT *
     FROM TPCDS.store_sales,
          TPCDS.date_dim
     WHERE c.c_customer_sk = ss_customer_sk
       AND ss_sold_date_sk = d_date_sk
       AND d_year = 2001
       AND d_moy BETWEEN 4 AND 4+2)
  AND (NOT EXISTS
         (SELECT *
          FROM TPCDS.web_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = ws_bill_customer_sk
            AND ws_sold_date_sk = d_date_sk
            AND d_year = 2001
            AND d_moy BETWEEN 4 AND 4+2)
       AND NOT EXISTS
         (SELECT *
          FROM TPCDS.catalog_sales,
               TPCDS.date_dim
          WHERE c.c_customer_sk = cs_ship_customer_sk
            AND cs_sold_date_sk = d_date_sk
            AND d_year = 2001
            AND d_moy BETWEEN 4 AND 4+2))
GROUP BY cd_gender,
         cd_marital_status,
         cd_education_status,
         cd_purchase_estimate,
         cd_credit_rating
ORDER BY cd_gender,
         cd_marital_status,
         cd_education_status,
         cd_purchase_estimate,
         cd_credit_rating
OPTION (LABEL = &apos;q69&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q70" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q70.sql--

SELECT *
FROM
(
SELECT TOP 100 sum(ss_net_profit) AS total_sum,
       s_state,
       s_county ,
       grouping(s_state)+grouping(s_county) AS lochierarchy ,
       rank() OVER (PARTITION BY grouping(s_state)+grouping(s_county),
                                 CASE
                                     WHEN grouping(s_county) = 0 THEN s_state
                                 END
                    ORDER BY sum(ss_net_profit) DESC) AS rank_within_parent
FROM TPCDS.store_sales,
     TPCDS.date_dim d1,
     TPCDS.store
WHERE d1.d_month_seq BETWEEN 1200 AND 1200+11
  AND d1.d_date_sk = ss_sold_date_sk
  AND s_store_sk = ss_store_sk
  AND s_state IN
    (SELECT s_state
     FROM
       (SELECT s_state AS s_state,
               rank() OVER (PARTITION BY s_state
                            ORDER BY sum(ss_net_profit) DESC) AS ranking
        FROM TPCDS.store_sales,
             TPCDS.store,
             TPCDS.date_dim
        WHERE d_month_seq BETWEEN 1200 AND 1200+11
          AND d_date_sk = ss_sold_date_sk
          AND s_store_sk = ss_store_sk
        GROUP BY s_state) tmp1
     WHERE ranking &lt;= 5)
GROUP BY rollup(s_state, s_county)
) AS a
ORDER BY lochierarchy DESC ,
         CASE
             WHEN lochierarchy = 0 THEN s_state
         END ,
         rank_within_parent
OPTION (LABEL = &apos;q70&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q71" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q71.sql--

SELECT i_brand_id brand_id,
       i_brand brand,
       t_hour,
       t_minute,
       sum(ext_price) ext_price
FROM TPCDS.item,

  (SELECT ws_ext_sales_price AS ext_price,
          ws_sold_date_sk AS sold_date_sk,
          ws_item_sk AS sold_item_sk,
          ws_sold_time_sk AS time_sk
   FROM TPCDS.web_sales,
        TPCDS.date_dim
   WHERE d_date_sk = ws_sold_date_sk
     AND d_moy=11
     AND d_year=1999
   UNION ALL SELECT cs_ext_sales_price AS ext_price,
                    cs_sold_date_sk AS sold_date_sk,
                    cs_item_sk AS sold_item_sk,
                    cs_sold_time_sk AS time_sk
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim
   WHERE d_date_sk = cs_sold_date_sk
     AND d_moy=11
     AND d_year=1999
   UNION ALL SELECT ss_ext_sales_price AS ext_price,
                    ss_sold_date_sk AS sold_date_sk,
                    ss_item_sk AS sold_item_sk,
                    ss_sold_time_sk AS time_sk
   FROM TPCDS.store_sales,
        TPCDS.date_dim
   WHERE d_date_sk = ss_sold_date_sk
     AND d_moy=11
     AND d_year=1999 ) tmp,
     TPCDS.time_dim
WHERE sold_item_sk = i_item_sk
  AND i_manager_id=1
  AND time_sk = t_time_sk
  AND (t_meal_time = &apos;breakfast&apos;
       OR t_meal_time = &apos;dinner&apos;)
GROUP BY i_brand,
         i_brand_id,
         t_hour,
         t_minute
ORDER BY ext_price DESC,
         i_brand_id
OPTION (LABEL = &apos;q71&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q72" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q72.sql--

SELECT TOP 100 i_item_desc ,
       w_warehouse_name ,
       d1.d_week_seq ,
       sum(CASE
               WHEN p_promo_sk IS NULL THEN 1
               ELSE 0
           END) no_promo ,
       sum(CASE
               WHEN p_promo_sk IS NOT NULL THEN 1
               ELSE 0
           END) promo ,
       count(*) total_cnt
FROM TPCDS.catalog_sales
JOIN TPCDS.inventory ON (cs_item_sk = inv_item_sk)
JOIN TPCDS.warehouse ON (w_warehouse_sk=inv_warehouse_sk)
JOIN TPCDS.item ON (i_item_sk = cs_item_sk)
JOIN TPCDS.customer_demographics ON (cs_bill_cdemo_sk = cd_demo_sk)
JOIN TPCDS.household_demographics ON (cs_bill_hdemo_sk = hd_demo_sk)
JOIN TPCDS.date_dim d1 ON (cs_sold_date_sk = d1.d_date_sk)
JOIN TPCDS.date_dim d2 ON (inv_date_sk = d2.d_date_sk)
JOIN TPCDS.date_dim d3 ON (cs_ship_date_sk = d3.d_date_sk)
LEFT OUTER JOIN TPCDS.promotion ON (cs_promo_sk=p_promo_sk)
LEFT OUTER JOIN TPCDS.catalog_returns ON (cr_item_sk = cs_item_sk
                                          AND cr_order_number = cs_order_number)
WHERE d1.d_week_seq = d2.d_week_seq
  AND inv_quantity_on_hand &lt; cs_quantity
  AND d3.d_date &gt; (DATEADD(DAY, 5, cast(d1.d_date AS DATE)))
  AND hd_buy_potential = &apos;&gt;10000&apos;
  AND d1.d_year = 1999
  AND cd_marital_status = &apos;D&apos;
GROUP BY i_item_desc,
         w_warehouse_name,
         d1.d_week_seq
ORDER BY total_cnt DESC,
         i_item_desc,
         w_warehouse_name,
         d1.d_week_seq
OPTION (LABEL = &apos;q72&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q73" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q73.sql--

SELECT c_last_name,
       c_first_name,
       c_salutation,
       c_preferred_cust_flag,
       ss_ticket_number,
       cnt
FROM
  (SELECT ss_ticket_number,
          ss_customer_sk,
          count(*) cnt
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store,
        TPCDS.household_demographics
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_store_sk = TPCDS.store.s_store_sk
     AND TPCDS.store_sales.ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND TPCDS.date_dim.d_dom BETWEEN 1 AND 2
     AND (TPCDS.household_demographics.hd_buy_potential = &apos;&gt;10000&apos;
          OR TPCDS.household_demographics.hd_buy_potential = &apos;unknown&apos;)
     AND TPCDS.household_demographics.hd_vehicle_count &gt; 0
     AND CASE
             WHEN TPCDS.household_demographics.hd_vehicle_count &gt; 0 THEN TPCDS.household_demographics.hd_dep_count/ TPCDS.household_demographics.hd_vehicle_count
             ELSE NULL
         END &gt; 1
     AND TPCDS.date_dim.d_year IN (1999,
                                   1999+1,
                                   1999+2)
     AND TPCDS.store.s_county IN (&apos;Williamson County&apos;,
                                  &apos;Franklin Parish&apos;,
                                  &apos;Bronx County&apos;,
                                  &apos;Orange County&apos;)
   GROUP BY ss_ticket_number,
            ss_customer_sk) dj,
     TPCDS.customer
WHERE ss_customer_sk = c_customer_sk
  AND cnt BETWEEN 1 AND 5
ORDER BY cnt DESC,
         c_last_name ASC
OPTION (LABEL = &apos;q73&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q74" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q74.sql--
 WITH year_total AS
  (SELECT c_customer_id customer_id,
          c_first_name customer_first_name,
          c_last_name customer_last_name,
          d_year AS [Year],
          sum(ss_net_paid) year_total,
          &apos;s&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.store_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ss_customer_sk
     AND ss_sold_date_sk = d_date_sk
     AND d_year IN (2001,
                    2001+1)
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            d_year
   UNION ALL SELECT c_customer_id customer_id,
                    c_first_name customer_first_name,
                    c_last_name customer_last_name,
                    d_year AS [Year],
                    sum(ws_net_paid) year_total,
                    &apos;w&apos; sale_type
   FROM TPCDS.customer,
        TPCDS.web_sales,
        TPCDS.date_dim
   WHERE c_customer_sk = ws_bill_customer_sk
     AND ws_sold_date_sk = d_date_sk
     AND d_year IN (2001,
                    2001+1)
   GROUP BY c_customer_id,
            c_first_name,
            c_last_name,
            d_year)
SELECT TOP 100 t_s_secyear.customer_id,
       t_s_secyear.customer_first_name,
       t_s_secyear.customer_last_name
FROM year_total t_s_firstyear,
     year_total t_s_secyear,
     year_total t_w_firstyear,
     year_total t_w_secyear
WHERE t_s_secyear.customer_id = t_s_firstyear.customer_id
  AND t_s_firstyear.customer_id = t_w_secyear.customer_id
  AND t_s_firstyear.customer_id = t_w_firstyear.customer_id
  AND t_s_firstyear.sale_type = &apos;s&apos;
  AND t_w_firstyear.sale_type = &apos;w&apos;
  AND t_s_secyear.sale_type = &apos;s&apos;
  AND t_w_secyear.sale_type = &apos;w&apos;
  AND t_s_firstyear.[Year] = 2001
  AND t_s_secyear.[Year] = 2001+1
  AND t_w_firstyear.[Year] = 2001
  AND t_w_secyear.[Year] = 2001+1
  AND t_s_firstyear.year_total &gt; 0
  AND t_w_firstyear.year_total &gt; 0
  AND CASE
          WHEN t_w_firstyear.year_total &gt; 0 THEN t_w_secyear.year_total / t_w_firstyear.year_total
          ELSE NULL
      END &gt; CASE
                WHEN t_s_firstyear.year_total &gt; 0 THEN t_s_secyear.year_total / t_s_firstyear.year_total
                ELSE NULL
            END
ORDER BY 1, 2, 3
OPTION (LABEL = &apos;q74&apos;)
         
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q75" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q75.sql--
 WITH all_sales AS
  (SELECT d_year,
          i_brand_id,
          i_class_id,
          i_category_id,
          i_manufact_id,
          SUM(sales_cnt) AS sales_cnt,
          SUM(sales_amt) AS sales_amt
   FROM
     (SELECT d_year,
             i_brand_id,
             i_class_id,
             i_category_id,
             i_manufact_id,
             cs_quantity - COALESCE(cr_return_quantity, 0) AS sales_cnt,
             cs_ext_sales_price - COALESCE(cr_return_amount, 0.0) AS sales_amt
      FROM TPCDS.catalog_sales
      JOIN TPCDS.item ON i_item_sk=cs_item_sk
      JOIN TPCDS.date_dim ON d_date_sk=cs_sold_date_sk
      LEFT JOIN TPCDS.catalog_returns ON (cs_order_number=cr_order_number
                                          AND cs_item_sk=cr_item_sk)
      WHERE i_category=&apos;Books&apos;
      UNION SELECT d_year,
                   i_brand_id,
                   i_class_id,
                   i_category_id,
                   i_manufact_id,
                   ss_quantity - COALESCE(sr_return_quantity, 0) AS sales_cnt,
                   ss_ext_sales_price - COALESCE(sr_return_amt, 0.0) AS sales_amt
      FROM TPCDS.store_sales
      JOIN TPCDS.item ON i_item_sk=ss_item_sk
      JOIN TPCDS.date_dim ON d_date_sk=ss_sold_date_sk
      LEFT JOIN TPCDS.store_returns ON (ss_ticket_number=sr_ticket_number
                                        AND ss_item_sk=sr_item_sk)
      WHERE i_category=&apos;Books&apos;
      UNION SELECT d_year,
                   i_brand_id,
                   i_class_id,
                   i_category_id,
                   i_manufact_id,
                   ws_quantity - COALESCE(wr_return_quantity, 0) AS sales_cnt,
                   ws_ext_sales_price - COALESCE(wr_return_amt, 0.0) AS sales_amt
      FROM TPCDS.web_sales
      JOIN TPCDS.item ON i_item_sk=ws_item_sk
      JOIN TPCDS.date_dim ON d_date_sk=ws_sold_date_sk
      LEFT JOIN TPCDS.web_returns ON (ws_order_number=wr_order_number
                                      AND ws_item_sk=wr_item_sk)
      WHERE i_category=&apos;Books&apos;) sales_detail
   GROUP BY d_year,
            i_brand_id,
            i_class_id,
            i_category_id,
            i_manufact_id)
SELECT TOP 100 prev_yr.d_year AS prev_year,
       curr_yr.d_year AS YEAR,
       curr_yr.i_brand_id,
       curr_yr.i_class_id,
       curr_yr.i_category_id,
       curr_yr.i_manufact_id,
       prev_yr.sales_cnt AS prev_yr_cnt,
       curr_yr.sales_cnt AS curr_yr_cnt,
       curr_yr.sales_cnt-prev_yr.sales_cnt AS sales_cnt_diff,
       curr_yr.sales_amt-prev_yr.sales_amt AS sales_amt_diff
FROM all_sales curr_yr,
     all_sales prev_yr
WHERE curr_yr.i_brand_id=prev_yr.i_brand_id
  AND curr_yr.i_class_id=prev_yr.i_class_id
  AND curr_yr.i_category_id=prev_yr.i_category_id
  AND curr_yr.i_manufact_id=prev_yr.i_manufact_id
  AND curr_yr.d_year=2002
  AND prev_yr.d_year=2002-1
  AND CAST(curr_yr.sales_cnt AS DECIMAL(17, 2))/CAST(prev_yr.sales_cnt AS DECIMAL(17, 2))&lt;0.9
ORDER BY sales_cnt_diff
OPTION (LABEL = &apos;q75&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q76" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q76.sql--

SELECT TOP 100 channel,
       col_name,
       d_year,
       d_qoy,
       i_category,
       COUNT(*) sales_cnt,
       SUM(ext_sales_price) sales_amt
FROM
  (SELECT &apos;store&apos; AS channel,
          ss_store_sk col_name,
          d_year,
          d_qoy,
          i_category,
          ss_ext_sales_price ext_sales_price
   FROM TPCDS.store_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ss_store_sk IS NULL
     AND ss_sold_date_sk=d_date_sk
     AND ss_item_sk=i_item_sk
   UNION ALL SELECT &apos;web&apos; AS channel,
                    ws_ship_customer_sk col_name,
                    d_year,
                    d_qoy,
                    i_category,
                    ws_ext_sales_price ext_sales_price
   FROM TPCDS.web_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE ws_ship_customer_sk IS NULL
     AND ws_sold_date_sk=d_date_sk
     AND ws_item_sk=i_item_sk
   UNION ALL SELECT &apos;catalog&apos; AS channel,
                    cs_ship_addr_sk col_name,
                    d_year,
                    d_qoy,
                    i_category,
                    cs_ext_sales_price ext_sales_price
   FROM TPCDS.catalog_sales,
        TPCDS.item,
        TPCDS.date_dim
   WHERE cs_ship_addr_sk IS NULL
     AND cs_sold_date_sk=d_date_sk
     AND cs_item_sk=i_item_sk) foo
GROUP BY channel,
         col_name,
         d_year,
         d_qoy,
         i_category
ORDER BY channel,
         col_name,
         d_year,
         d_qoy,
         i_category
OPTION (LABEL = &apos;q76&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q77" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q77.sql--
 WITH ss AS
  (SELECT s_store_sk,
          sum(ss_ext_sales_price) AS sales,
          sum(ss_net_profit) AS profit
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store
   WHERE ss_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND ss_store_sk = s_store_sk
   GROUP BY s_store_sk),
      sr AS
  (SELECT s_store_sk,
          sum(sr_return_amt) AS RETURNS,
          sum(sr_net_loss) AS profit_loss
   FROM TPCDS.store_returns,
        TPCDS.date_dim,
        TPCDS.store
   WHERE sr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND sr_store_sk = s_store_sk
   GROUP BY s_store_sk),
      cs AS
  (SELECT cs_call_center_sk,
          sum(cs_ext_sales_price) AS sales,
          sum(cs_net_profit) AS profit
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim
   WHERE cs_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
   GROUP BY cs_call_center_sk),
      cr AS
  (SELECT cr_call_center_sk,
          sum(cr_return_amount) AS RETURNS,
          sum(cr_net_loss) AS profit_loss
   FROM TPCDS.catalog_returns,
        TPCDS.date_dim
   WHERE cr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
   GROUP BY cr_call_center_sk),
      ws AS
  (SELECT wp_web_page_sk,
          sum(ws_ext_sales_price) AS sales,
          sum(ws_net_profit) AS profit
   FROM TPCDS.web_sales,
        TPCDS.date_dim,
        TPCDS.web_page
   WHERE ws_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND ws_web_page_sk = wp_web_page_sk
   GROUP BY wp_web_page_sk),
      wr AS
  (SELECT wp_web_page_sk,
          sum(wr_return_amt) AS RETURNS,
          sum(wr_net_loss) AS profit_loss
   FROM TPCDS.web_returns,
        TPCDS.date_dim,
        TPCDS.web_page
   WHERE wr_returned_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND wr_web_page_sk = wp_web_page_sk
   GROUP BY wp_web_page_sk)
SELECT TOP 100 channel,
       id,
       sum(sales) AS sales,
       sum(RETURNS) AS RETURNS,
       sum(profit) AS profit
FROM
  (SELECT &apos;store channel&apos; AS channel,
          ss.s_store_sk AS id,
          sales,
          coalesce(RETURNS, 0) AS RETURNS,
          (profit - coalesce(profit_loss, 0)) AS profit
   FROM ss
   LEFT JOIN sr ON ss.s_store_sk = sr.s_store_sk
   UNION ALL SELECT &apos;catalog channel&apos; AS channel,
                    cs_call_center_sk AS id,
                    sales,
                    RETURNS,
                    (profit - profit_loss) AS profit
   FROM cs
   CROSS JOIN cr
   UNION ALL SELECT &apos;web channel&apos; AS channel,
                    ws.wp_web_page_sk AS id,
                    sales,
                    coalesce(RETURNS, 0) RETURNS,
                                         (profit - coalesce(profit_loss, 0)) AS profit
   FROM ws
   LEFT JOIN wr ON ws.wp_web_page_sk = wr.wp_web_page_sk) x
GROUP BY rollup(channel, id)
ORDER BY channel,
         id
OPTION (LABEL = &apos;q77&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q78" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q78.sql--
 WITH ws AS
  (SELECT d_year AS ws_sold_year,
          ws_item_sk,
          ws_bill_customer_sk ws_customer_sk,
          sum(ws_quantity) ws_qty,
          sum(ws_wholesale_cost) ws_wc,
          sum(ws_sales_price) ws_sp
   FROM TPCDS.web_sales
   LEFT JOIN TPCDS.web_returns ON wr_order_number=ws_order_number
   AND ws_item_sk=wr_item_sk
   JOIN TPCDS.date_dim ON ws_sold_date_sk = d_date_sk
   WHERE wr_order_number IS NULL
   GROUP BY d_year,
            ws_item_sk,
            ws_bill_customer_sk),
      cs AS
  (SELECT d_year AS cs_sold_year,
          cs_item_sk,
          cs_bill_customer_sk cs_customer_sk,
          sum(cs_quantity) cs_qty,
          sum(cs_wholesale_cost) cs_wc,
          sum(cs_sales_price) cs_sp
   FROM TPCDS.catalog_sales
   LEFT JOIN TPCDS.catalog_returns ON cr_order_number=cs_order_number
   AND cs_item_sk=cr_item_sk
   JOIN TPCDS.date_dim ON cs_sold_date_sk = d_date_sk
   WHERE cr_order_number IS NULL
   GROUP BY d_year,
            cs_item_sk,
            cs_bill_customer_sk),
      ss AS
  (SELECT d_year AS ss_sold_year,
          ss_item_sk,
          ss_customer_sk,
          sum(ss_quantity) ss_qty,
          sum(ss_wholesale_cost) ss_wc,
          sum(ss_sales_price) ss_sp
   FROM TPCDS.store_sales
   LEFT JOIN TPCDS.store_returns ON sr_ticket_number=ss_ticket_number
   AND ss_item_sk=sr_item_sk
   JOIN TPCDS.date_dim ON ss_sold_date_sk = d_date_sk
   WHERE sr_ticket_number IS NULL
   GROUP BY d_year,
            ss_item_sk,
            ss_customer_sk)
SELECT TOP 100 ss_sold_year,
       ss_item_sk,
       ss_customer_sk,
       round(ss_qty/(coalesce(ws_qty, 0)+coalesce(cs_qty, 0)), 2) ratio,
       ss_qty store_qty,
       ss_wc store_wholesale_cost,
       ss_sp store_sales_price,
       coalesce(ws_qty, 0)+coalesce(cs_qty, 0) other_chan_qty,
       coalesce(ws_wc, 0)+coalesce(cs_wc, 0) other_chan_wholesale_cost,
       coalesce(ws_sp, 0)+coalesce(cs_sp, 0) other_chan_sales_price
FROM ss
LEFT JOIN ws ON (ws_sold_year=ss_sold_year
                 AND ws_item_sk=ss_item_sk
                 AND ws_customer_sk=ss_customer_sk)
LEFT JOIN cs ON (cs_sold_year=ss_sold_year
                 AND cs_item_sk=ss_item_sk
                 AND cs_customer_sk=ss_customer_sk)
WHERE (coalesce(ws_qty, 0)&gt;0
       OR coalesce(cs_qty, 0)&gt;0)
  AND ss_sold_year=2000
ORDER BY ss_sold_year,
         ss_item_sk,
         ss_customer_sk,
         ss_qty DESC,
         ss_wc DESC,
         ss_sp DESC,
         other_chan_qty,
         other_chan_wholesale_cost,
         other_chan_sales_price,
         round(ss_qty/(coalesce(ws_qty+cs_qty, 1)), 2)
OPTION (LABEL = &apos;q78&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q79" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q79.sql--

SELECT TOP 100 c_last_name,
       c_first_name,
       SUBSTRING(s_city, 1, 30),
       ss_ticket_number,
       amt,
       profit
FROM
  (SELECT ss_ticket_number ,
          ss_customer_sk ,
          TPCDS.store.s_city ,
          sum(ss_coupon_amt) amt ,
          sum(ss_net_profit) profit
   FROM TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store,
        TPCDS.household_demographics
   WHERE TPCDS.store_sales.ss_sold_date_sk = TPCDS.date_dim.d_date_sk
     AND TPCDS.store_sales.ss_store_sk = TPCDS.store.s_store_sk
     AND TPCDS.store_sales.ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND (TPCDS.household_demographics.hd_dep_count = 6
          OR TPCDS.household_demographics.hd_vehicle_count &gt; 2)
     AND TPCDS.date_dim.d_dow = 1
     AND TPCDS.date_dim.d_year IN (1999,
                                   1999+1,
                                   1999+2)
     AND TPCDS.store.s_number_employees BETWEEN 200 AND 295
   GROUP BY ss_ticket_number,
            ss_customer_sk,
            ss_addr_sk,
            TPCDS.store.s_city) ms,
     TPCDS.customer
WHERE ss_customer_sk = c_customer_sk
ORDER BY c_last_name,
         c_first_name,
         SUBSTRING(s_city, 1, 30),
         profit
OPTION (LABEL = &apos;q79&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q80" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q80.sql--
 WITH ssr AS
  (SELECT s_store_id AS store_id,
          sum(ss_ext_sales_price) AS sales,
          sum(coalesce(sr_return_amt, 0)) AS RETURNS,
          sum(ss_net_profit - coalesce(sr_net_loss, 0)) AS profit
   FROM TPCDS.store_sales
   LEFT OUTER JOIN TPCDS.store_returns ON (ss_item_sk = sr_item_sk
                                           AND ss_ticket_number = sr_ticket_number), TPCDS.date_dim,
                                                                                     TPCDS.store,
                                                                                     TPCDS.item,
                                                                                     TPCDS.promotion
   WHERE ss_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND ss_store_sk = s_store_sk
     AND ss_item_sk = i_item_sk
     AND i_current_price &gt; 50
     AND ss_promo_sk = p_promo_sk
     AND p_channel_tv = &apos;N&apos;
   GROUP BY s_store_id),
      csr AS
  (SELECT cp_catalog_page_id AS catalog_page_id,
          sum(cs_ext_sales_price) AS sales,
          sum(coalesce(cr_return_amount, 0)) AS RETURNS,
          sum(cs_net_profit - coalesce(cr_net_loss, 0)) AS profit
   FROM TPCDS.catalog_sales
   LEFT OUTER JOIN TPCDS.catalog_returns ON (cs_item_sk = cr_item_sk
                                             AND cs_order_number = cr_order_number), TPCDS.date_dim,
                                                                                     TPCDS.catalog_page,
                                                                                     TPCDS.item,
                                                                                     TPCDS.promotion
   WHERE cs_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND cs_catalog_page_sk = cp_catalog_page_sk
     AND cs_item_sk = i_item_sk
     AND i_current_price &gt; 50
     AND cs_promo_sk = p_promo_sk
     AND p_channel_tv = &apos;N&apos;
   GROUP BY cp_catalog_page_id),
      wsr AS
  (SELECT web_site_id,
          sum(ws_ext_sales_price) AS sales,
          sum(coalesce(wr_return_amt, 0)) AS RETURNS,
          sum(ws_net_profit - coalesce(wr_net_loss, 0)) AS profit
   FROM TPCDS.web_sales
   LEFT OUTER JOIN TPCDS.web_returns ON (ws_item_sk = wr_item_sk
                                         AND ws_order_number = wr_order_number), TPCDS.date_dim,
                                                                                 TPCDS.web_site,
                                                                                 TPCDS.item,
                                                                                 TPCDS.promotion
   WHERE ws_sold_date_sk = d_date_sk
     AND d_date BETWEEN cast(&apos;2000-08-23&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;2000-08-23&apos; AS date)))
     AND ws_web_site_sk = web_site_sk
     AND ws_item_sk = i_item_sk
     AND i_current_price &gt; 50
     AND ws_promo_sk = p_promo_sk
     AND p_channel_tv = &apos;N&apos;
   GROUP BY web_site_id)
SELECT TOP 100 channel,
       id,
       sum(sales) AS sales,
       sum(RETURNS) AS RETURNS,
       sum(profit) AS profit
FROM
  (SELECT &apos;store channel&apos; AS channel,
          concat(&apos;store&apos;, store_id) AS id,
          sales,
          RETURNS,
          profit
   FROM ssr
   UNION ALL SELECT &apos;catalog channel&apos; AS channel,
                    concat(&apos;catalog_page&apos;, catalog_page_id) AS id,
                    sales,
                    RETURNS,
                    profit
   FROM csr
   UNION ALL SELECT &apos;web channel&apos; AS channel,
                    concat(&apos;web_site&apos;, web_site_id) AS id,
                    sales,
                    RETURNS,
                    profit
   FROM wsr) x
GROUP BY ROLLUP (channel,
                 id)
ORDER BY channel,
         id
OPTION (LABEL = &apos;q80&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q81" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q81.sql--
 WITH customer_total_return AS
  (SELECT cr_returning_customer_sk AS ctr_customer_sk,
          ca_state AS ctr_state,
          sum(cr_return_amt_inc_tax) AS ctr_total_return
   FROM TPCDS.catalog_returns,
        TPCDS.date_dim,
        TPCDS.customer_address
   WHERE cr_returned_date_sk = d_date_sk
     AND d_year = 2000
     AND cr_returning_addr_sk = ca_address_sk
   GROUP BY cr_returning_customer_sk,
            ca_state)
SELECT TOP 100 c_customer_id,
       c_salutation,
       c_first_name,
       c_last_name,
       ca_street_number,
       ca_street_name,
       ca_street_type,
       ca_suite_number,
       ca_city,
       ca_county,
       ca_state,
       ca_zip,
       ca_country,
       ca_gmt_offset,
       ca_location_type,
       ctr_total_return
FROM customer_total_return ctr1,
     TPCDS.customer_address,
     TPCDS.customer
WHERE ctr1.ctr_total_return &gt;
    (SELECT avg(ctr_total_return)*1.2
     FROM customer_total_return ctr2
     WHERE ctr1.ctr_state = ctr2.ctr_state)
  AND ca_address_sk = c_current_addr_sk
  AND ca_state = &apos;GA&apos;
  AND ctr1.ctr_customer_sk = c_customer_sk
ORDER BY c_customer_id,
         c_salutation,
         c_first_name,
         c_last_name,
         ca_street_number,
         ca_street_name ,
         ca_street_type,
         ca_suite_number,
         ca_city,
         ca_county,
         ca_state,
         ca_zip,
         ca_country,
         ca_gmt_offset ,
         ca_location_type,
         ctr_total_return
OPTION (LABEL = &apos;q81&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q82" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q82.sql--

SELECT TOP 100 i_item_id,
       i_item_desc,
       i_current_price
FROM TPCDS.item,
     TPCDS.inventory,
     TPCDS.date_dim,
     TPCDS.store_sales
WHERE i_current_price BETWEEN 62 AND 62+30
  AND inv_item_sk = i_item_sk
  AND d_date_sk=inv_date_sk
  AND d_date BETWEEN cast(&apos;2000-05-25&apos; AS date) AND (DATEADD(DAY, 60, cast(&apos;2000-05-25&apos; AS date)))
  AND i_manufact_id IN (129,
                        270,
                        821,
                        423)
  AND inv_quantity_on_hand BETWEEN 100 AND 500
  AND ss_item_sk = i_item_sk
GROUP BY i_item_id,
         i_item_desc,
         i_current_price
ORDER BY i_item_id
OPTION (LABEL = &apos;q82&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q83" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q83.sql--
 WITH sr_items AS
  (SELECT i_item_id item_id,
          sum(sr_return_quantity) sr_item_qty
   FROM TPCDS.store_returns,
        TPCDS.item,
        TPCDS.date_dim
   WHERE sr_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq IN
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date IN (cast(&apos;2000-06-30&apos; AS date),
                              cast(&apos;2000-09-27&apos; AS date),
                              cast(&apos;2000-11-17&apos; AS date))))
     AND sr_returned_date_sk = d_date_sk
   GROUP BY i_item_id),
      cr_items AS
  (SELECT i_item_id item_id,
          sum(cr_return_quantity) cr_item_qty
   FROM TPCDS.catalog_returns,
        TPCDS.item,
        TPCDS.date_dim
   WHERE cr_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq IN
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date IN (cast(&apos;2000-06-30&apos; AS date),
                              cast(&apos;2000-09-27&apos; AS date),
                              cast(&apos;2000-11-17&apos; AS date))))
     AND cr_returned_date_sk = d_date_sk
   GROUP BY i_item_id),
      wr_items AS
  (SELECT i_item_id item_id,
          sum(wr_return_quantity) wr_item_qty
   FROM TPCDS.web_returns,
        TPCDS.item,
        TPCDS.date_dim
   WHERE wr_item_sk = i_item_sk
     AND d_date IN
       (SELECT d_date
        FROM TPCDS.date_dim
        WHERE d_week_seq IN
            (SELECT d_week_seq
             FROM TPCDS.date_dim
             WHERE d_date IN (cast(&apos;2000-06-30&apos; AS date),
                              cast(&apos;2000-09-27&apos; AS date),
                              cast(&apos;2000-11-17&apos; AS date))))
     AND wr_returned_date_sk = d_date_sk
   GROUP BY i_item_id)
SELECT TOP 100 sr_items.item_id ,
       sr_item_qty ,
       sr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 sr_dev ,
       cr_item_qty ,
       cr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 cr_dev ,
       wr_item_qty ,
       wr_item_qty/(sr_item_qty+cr_item_qty+wr_item_qty)/3.0 * 100 wr_dev ,
       (sr_item_qty+cr_item_qty+wr_item_qty)/3.0 average
FROM sr_items,
     cr_items,
     wr_items
WHERE sr_items.item_id=cr_items.item_id
  AND sr_items.item_id=wr_items.item_id
ORDER BY sr_items.item_id,
         sr_item_qty
OPTION (LABEL = &apos;q83&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q84" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q84.sql--

SELECT TOP 100 c_customer_id AS customer_id ,
       coalesce(c_last_name, &apos;&apos;) + &apos;, &apos; + coalesce(c_first_name, &apos;&apos;) AS customername
FROM TPCDS.customer ,
     TPCDS.customer_address ,
     TPCDS.customer_demographics ,
     TPCDS.household_demographics ,
     TPCDS.income_band ,
     TPCDS.store_returns
WHERE ca_city = &apos;Edgewood&apos;
  AND c_current_addr_sk = ca_address_sk
  AND ib_lower_bound &gt;= 38128
  AND ib_upper_bound &lt;= 38128 + 50000
  AND ib_income_band_sk = hd_income_band_sk
  AND cd_demo_sk = c_current_cdemo_sk
  AND hd_demo_sk = c_current_hdemo_sk
  AND sr_cdemo_sk = cd_demo_sk
ORDER BY c_customer_id
OPTION (LABEL = &apos;q84&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q85" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q85.sql--

SELECT TOP 100 SUBSTRING(r_reason_desc, 1, 20),
       avg(ws_quantity),
       avg(wr_refunded_cash),
       avg(wr_fee)
FROM TPCDS.web_sales,
     TPCDS.web_returns,
     TPCDS.web_page,
     TPCDS.customer_demographics cd1,
     TPCDS.customer_demographics cd2,
     TPCDS.customer_address,
     TPCDS.date_dim,
     TPCDS.reason
WHERE ws_web_page_sk = wp_web_page_sk
  AND ws_item_sk = wr_item_sk
  AND ws_order_number = wr_order_number
  AND ws_sold_date_sk = d_date_sk
  AND d_year = 2000
  AND cd1.cd_demo_sk = wr_refunded_cdemo_sk
  AND cd2.cd_demo_sk = wr_returning_cdemo_sk
  AND ca_address_sk = wr_refunded_addr_sk
  AND r_reason_sk = wr_reason_sk
  AND ((cd1.cd_marital_status = &apos;M&apos;
        AND cd1.cd_marital_status = cd2.cd_marital_status
        AND cd1.cd_education_status = &apos;Advanced Degree&apos;
        AND cd1.cd_education_status = cd2.cd_education_status
        AND ws_sales_price BETWEEN 100.00 AND 150.00)
       OR (cd1.cd_marital_status = &apos;S&apos;
           AND cd1.cd_marital_status = cd2.cd_marital_status
           AND cd1.cd_education_status = &apos;College&apos;
           AND cd1.cd_education_status = cd2.cd_education_status
           AND ws_sales_price BETWEEN 50.00 AND 100.00)
       OR (cd1.cd_marital_status = &apos;W&apos;
           AND cd1.cd_marital_status = cd2.cd_marital_status
           AND cd1.cd_education_status = &apos;2 yr Degree&apos;
           AND cd1.cd_education_status = cd2.cd_education_status
           AND ws_sales_price BETWEEN 150.00 AND 200.00))
  AND ((ca_country = &apos;United States&apos;
        AND ca_state IN (&apos;IN&apos;,
                         &apos;OH&apos;,
                         &apos;NJ&apos;)
        AND ws_net_profit BETWEEN 100 AND 200)
       OR (ca_country = &apos;United States&apos;
           AND ca_state IN (&apos;WI&apos;,
                            &apos;CT&apos;,
                            &apos;KY&apos;)
           AND ws_net_profit BETWEEN 150 AND 300)
       OR (ca_country = &apos;United States&apos;
           AND ca_state IN (&apos;LA&apos;,
                            &apos;IA&apos;,
                            &apos;AR&apos;)
           AND ws_net_profit BETWEEN 50 AND 250))
GROUP BY r_reason_desc
ORDER BY SUBSTRING(r_reason_desc, 1, 20) ,
         avg(ws_quantity) ,
         avg(wr_refunded_cash) ,
         avg(wr_fee)
OPTION (LABEL = &apos;q85&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q86" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q86.sql--

SELECT *
FROM
(
SELECT TOP 100 sum(ws_net_paid) AS total_sum,
       i_category,
       i_class,
       grouping(i_category)+grouping(i_class) AS lochierarchy,
       rank() OVER (PARTITION BY grouping(i_category)+grouping(i_class),
                                 CASE
                                     WHEN grouping(i_class) = 0 THEN i_category
                                 END
                    ORDER BY sum(ws_net_paid) DESC) AS rank_within_parent
FROM TPCDS.web_sales,
     TPCDS.date_dim d1,
     TPCDS.item
WHERE d1.d_month_seq BETWEEN 1200 AND 1200+11
  AND d1.d_date_sk = ws_sold_date_sk
  AND i_item_sk = ws_item_sk
GROUP BY rollup(i_category, i_class)
) AS a
ORDER BY lochierarchy DESC,
         CASE
             WHEN lochierarchy = 0 THEN i_category
         END,
         rank_within_parent
OPTION (LABEL = &apos;q86&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q87" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q87.sql--

SELECT count(*)
FROM (
        (SELECT DISTINCT c_last_name,
                         c_first_name,
                         d_date
         FROM TPCDS.store_sales,
              TPCDS.date_dim,
              TPCDS.customer
         WHERE store_sales.ss_sold_date_sk = date_dim.d_date_sk
           AND store_sales.ss_customer_sk = customer.c_customer_sk
           AND d_month_seq BETWEEN 1200 AND 1200+11)
      EXCEPT
        (SELECT DISTINCT c_last_name,
                         c_first_name,
                         d_date
         FROM TPCDS.catalog_sales,
              TPCDS.date_dim,
              TPCDS.customer
         WHERE catalog_sales.cs_sold_date_sk = date_dim.d_date_sk
           AND catalog_sales.cs_bill_customer_sk = customer.c_customer_sk
           AND d_month_seq BETWEEN 1200 AND 1200+11)
      EXCEPT
        (SELECT DISTINCT c_last_name,
                         c_first_name,
                         d_date
         FROM TPCDS.web_sales,
              TPCDS.date_dim,
              TPCDS.customer
         WHERE web_sales.ws_sold_date_sk = date_dim.d_date_sk
           AND web_sales.ws_bill_customer_sk = customer.c_customer_sk
           AND d_month_seq BETWEEN 1200 AND 1200+11)) cool_cust
OPTION (LABEL = &apos;q87&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q88" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q88.sql--

SELECT *
FROM
  (SELECT count(*) h8_30_to_9
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 8
     AND TPCDS.time_dim.t_minute &gt;= 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s1
CROSS JOIN
  (SELECT count(*) h9_to_9_30
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 9
     AND TPCDS.time_dim.t_minute &lt; 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s2
CROSS JOIN
  (SELECT count(*) h9_30_to_10
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 9
     AND TPCDS.time_dim.t_minute &gt;= 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s3
CROSS JOIN
  (SELECT count(*) h10_to_10_30
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 10
     AND TPCDS.time_dim.t_minute &lt; 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s4
CROSS JOIN
  (SELECT count(*) h10_30_to_11
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 10
     AND TPCDS.time_dim.t_minute &gt;= 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s5
CROSS JOIN
  (SELECT count(*) h11_to_11_30
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 11
     AND TPCDS.time_dim.t_minute &lt; 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s6
CROSS JOIN
  (SELECT count(*) h11_30_to_12
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 11
     AND TPCDS.time_dim.t_minute &gt;= 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s7
CROSS JOIN
  (SELECT count(*) h12_to_12_30
   FROM TPCDS.store_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.store
   WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ss_store_sk = s_store_sk
     AND TPCDS.time_dim.t_hour = 12
     AND TPCDS.time_dim.t_minute &lt; 30
     AND ((TPCDS.household_demographics.hd_dep_count = 4
           AND TPCDS.household_demographics.hd_vehicle_count&lt;=4+2)
          OR (TPCDS.household_demographics.hd_dep_count = 2
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=2+2)
          OR (TPCDS.household_demographics.hd_dep_count = 0
              AND TPCDS.household_demographics.hd_vehicle_count&lt;=0+2))
     AND TPCDS.store.s_store_name = &apos;ese&apos;) s8
OPTION (LABEL = &apos;q88&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q89" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q89.sql--

SELECT TOP 100 *
FROM
  (SELECT i_category,
          i_class,
          i_brand,
          s_store_name,
          s_company_name,
          d_moy,
          sum(ss_sales_price) sum_sales,
          avg(sum(ss_sales_price)) OVER (PARTITION BY i_category,
                                                      i_brand,
                                                      s_store_name,
                                                      s_company_name) avg_monthly_sales
   FROM TPCDS.item,
        TPCDS.store_sales,
        TPCDS.date_dim,
        TPCDS.store
   WHERE ss_item_sk = i_item_sk
     AND ss_sold_date_sk = d_date_sk
     AND ss_store_sk = s_store_sk
     AND d_year IN (1999)
     AND ((i_category IN (&apos;Books&apos;,
                          &apos;Electronics&apos;,
                          &apos;Sports&apos;)
           AND i_class IN (&apos;computers&apos;,
                           &apos;stereo&apos;,
                           &apos;football&apos;))
          OR (i_category IN (&apos;Men&apos;,
                             &apos;Jewelry&apos;,
                             &apos;Women&apos;)
              AND i_class IN (&apos;shirts&apos;,
                              &apos;birdal&apos;,
                              &apos;dresses&apos;)))
   GROUP BY i_category,
            i_class,
            i_brand,
            s_store_name,
            s_company_name,
            d_moy) tmp1
WHERE CASE
          WHEN (avg_monthly_sales &lt;&gt; 0) THEN (abs(sum_sales - avg_monthly_sales) / avg_monthly_sales)
          ELSE NULL
      END &gt; 0.1
ORDER BY sum_sales - avg_monthly_sales,
         s_store_name
OPTION (LABEL = &apos;q89&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q90" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q90.sql--

SELECT TOP 100 cast(amc AS decimal(15, 4))/cast(pmc AS decimal(15, 4)) am_pm_ratio
FROM
  (SELECT count(*) amc
   FROM TPCDS.web_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.web_page
   WHERE ws_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ws_ship_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ws_web_page_sk = TPCDS.web_page.wp_web_page_sk
     AND TPCDS.time_dim.t_hour BETWEEN 8 AND 8+1
     AND TPCDS.household_demographics.hd_dep_count = 6
     AND TPCDS.web_page.wp_char_count BETWEEN 5000 AND 5200) AT
CROSS JOIN
  (SELECT count(*) pmc
   FROM TPCDS.web_sales,
        TPCDS.household_demographics,
        TPCDS.time_dim,
        TPCDS.web_page
   WHERE ws_sold_time_sk = TPCDS.time_dim.t_time_sk
     AND ws_ship_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
     AND ws_web_page_sk = TPCDS.web_page.wp_web_page_sk
     AND TPCDS.time_dim.t_hour BETWEEN 19 AND 19+1
     AND TPCDS.household_demographics.hd_dep_count = 6
     AND TPCDS.web_page.wp_char_count BETWEEN 5000 AND 5200) pt
ORDER BY am_pm_ratio
OPTION (LABEL = &apos;q90&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q91" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q91.sql--

SELECT cc_call_center_id Call_Center,
       cc_name Call_Center_Name,
       cc_manager Manager,
       sum(cr_net_loss) Returns_Loss
FROM TPCDS.call_center,
     TPCDS.catalog_returns,
     TPCDS.date_dim,
     TPCDS.customer,
     TPCDS.customer_address,
     TPCDS.customer_demographics,
     TPCDS.household_demographics
WHERE cr_call_center_sk = cc_call_center_sk
  AND cr_returned_date_sk = d_date_sk
  AND cr_returning_customer_sk = c_customer_sk
  AND cd_demo_sk = c_current_cdemo_sk
  AND hd_demo_sk = c_current_hdemo_sk
  AND ca_address_sk = c_current_addr_sk
  AND d_year = 1998
  AND d_moy = 11
  AND ((cd_marital_status = &apos;M&apos;
        AND cd_education_status = &apos;Unknown&apos;) or(cd_marital_status = &apos;W&apos;
                                                AND cd_education_status = &apos;Advanced Degree&apos;))
  AND hd_buy_potential like &apos;Unknown%&apos;
  AND ca_gmt_offset = -7
GROUP BY cc_call_center_id,
         cc_name,
         cc_manager,
         cd_marital_status,
         cd_education_status
ORDER BY sum(cr_net_loss) DESC
OPTION (LABEL = &apos;q91&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q92" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q92.sql--

SELECT TOP 100 sum(ws_ext_discount_amt) AS [Excess Discount Amount]
FROM TPCDS.web_sales,
     TPCDS.item,
     TPCDS.date_dim
WHERE i_manufact_id = 350
  AND i_item_sk = ws_item_sk
  AND d_date BETWEEN CAST (&apos;2000-01-27&apos; AS date) AND (DATEADD(DAY, 90, cast(&apos;2000-01-27&apos; AS date)))
  AND d_date_sk = ws_sold_date_sk
  AND ws_ext_discount_amt &gt;
    (SELECT 1.3 * avg(ws_ext_discount_amt)
     FROM TPCDS.web_sales,
          TPCDS.date_dim
     WHERE ws_item_sk = i_item_sk
       AND d_date BETWEEN CAST (&apos;2000-01-27&apos; AS date) AND (DATEADD(DAY, 90, cast(&apos;2000-01-27&apos; AS date)))
       AND d_date_sk = ws_sold_date_sk )
ORDER BY sum(ws_ext_discount_amt)
OPTION (LABEL = &apos;q92&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q93" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q93.sql--

SELECT TOP 100 ss_customer_sk,
       sum(act_sales) sumsales
FROM
  (SELECT ss_item_sk,
          ss_ticket_number,
          ss_customer_sk,
          CASE
              WHEN sr_return_quantity IS NOT NULL THEN (ss_quantity-sr_return_quantity)*ss_sales_price
              ELSE (ss_quantity*ss_sales_price)
          END act_sales
   FROM TPCDS.store_sales
   LEFT OUTER JOIN TPCDS.store_returns ON (sr_item_sk = ss_item_sk
                                           AND sr_ticket_number = ss_ticket_number), TPCDS.reason
   WHERE sr_reason_sk = r_reason_sk
     AND r_reason_desc = &apos;reason 28&apos;) t
GROUP BY ss_customer_sk
ORDER BY sumsales,
         ss_customer_sk
OPTION (LABEL = &apos;q93&apos;)
		 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q94" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q94.sql--

SELECT TOP 100 count(DISTINCT ws_order_number) AS [order count] ,
       sum(ws_ext_ship_cost) AS [total shipping cost] ,
       sum(ws_net_profit) AS [total net profit]
FROM TPCDS.web_sales ws1,
     TPCDS.date_dim,
     TPCDS.customer_address,
     TPCDS.web_site
WHERE d_date BETWEEN cast(&apos;1999-02-01&apos; AS date) AND (DATEADD(DAY, 60, cast(&apos;1999-02-01&apos; AS date)))
  AND ws1.ws_ship_date_sk = d_date_sk
  AND ws1.ws_ship_addr_sk = ca_address_sk
  AND ca_state = &apos;IL&apos;
  AND ws1.ws_web_site_sk = web_site_sk
  AND web_company_name = &apos;pri&apos;
  AND EXISTS
    (SELECT *
     FROM TPCDS.web_sales ws2
     WHERE ws1.ws_order_number = ws2.ws_order_number
       AND ws1.ws_warehouse_sk &lt;&gt; ws2.ws_warehouse_sk)
  AND NOT exists
    (SELECT *
     FROM TPCDS.web_returns wr1
     WHERE ws1.ws_order_number = wr1.wr_order_number)
ORDER BY count(DISTINCT ws_order_number)
OPTION (LABEL = &apos;q94&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q95" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q95.sql--
 WITH ws_wh AS
  (SELECT ws1.ws_order_number,
          ws1.ws_warehouse_sk wh1,
          ws2.ws_warehouse_sk wh2
   FROM TPCDS.web_sales ws1,
        TPCDS.web_sales ws2
   WHERE ws1.ws_order_number = ws2.ws_order_number
     AND ws1.ws_warehouse_sk &lt;&gt; ws2.ws_warehouse_sk)
SELECT TOP 100 count(DISTINCT ws_order_number) AS [order count] ,
       sum(ws_ext_ship_cost) AS [total shipping cost] ,
       sum(ws_net_profit) AS [total net profit]
FROM TPCDS.web_sales ws1,
     TPCDS.date_dim,
     TPCDS.customer_address,
     TPCDS.web_site
WHERE d_date BETWEEN CAST (&apos;1999-02-01&apos; AS date) AND (DATEADD(DAY, 60, cast(&apos;1999-02-01&apos; AS date)))
  AND ws1.ws_ship_date_sk = d_date_sk
  AND ws1.ws_ship_addr_sk = ca_address_sk
  AND ca_state = &apos;IL&apos;
  AND ws1.ws_web_site_sk = web_site_sk
  AND web_company_name = &apos;pri&apos;
  AND ws1.ws_order_number IN
    (SELECT ws_order_number
     FROM ws_wh)
  AND ws1.ws_order_number IN
    (SELECT wr_order_number
     FROM TPCDS.web_returns,
          ws_wh
     WHERE wr_order_number = ws_wh.ws_order_number)
ORDER BY count(DISTINCT ws_order_number)
OPTION (LABEL = &apos;q95&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q96" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q96.sql--

SELECT TOP 100 count(*)
FROM TPCDS.store_sales,
     TPCDS.household_demographics,
     TPCDS.time_dim,
     TPCDS.store
WHERE ss_sold_time_sk = TPCDS.time_dim.t_time_sk
  AND ss_hdemo_sk = TPCDS.household_demographics.hd_demo_sk
  AND ss_store_sk = s_store_sk
  AND TPCDS.time_dim.t_hour = 20
  AND TPCDS.time_dim.t_minute &gt;= 30
  AND TPCDS.household_demographics.hd_dep_count = 7
  AND TPCDS.store.s_store_name = &apos;ese&apos;
ORDER BY count(*)
OPTION (LABEL = &apos;q96&apos;)
</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q97" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q97.sql--
 WITH ssci AS
  (SELECT ss_customer_sk customer_sk,
          ss_item_sk item_sk
   FROM TPCDS.store_sales,
        TPCDS.date_dim
   WHERE ss_sold_date_sk = d_date_sk
     AND d_month_seq BETWEEN 1200 AND 1200 + 11
   GROUP BY ss_customer_sk,
            ss_item_sk),
      csci AS
  (SELECT cs_bill_customer_sk customer_sk,
          cs_item_sk item_sk
   FROM TPCDS.catalog_sales,
        TPCDS.date_dim
   WHERE cs_sold_date_sk = d_date_sk
     AND d_month_seq BETWEEN 1200 AND 1200 + 11
   GROUP BY cs_bill_customer_sk,
            cs_item_sk)
SELECT TOP 100 sum(CASE
               WHEN ssci.customer_sk IS NOT NULL
                    AND csci.customer_sk IS NULL THEN 1
               ELSE 0
           END) store_only ,
       sum(CASE
               WHEN ssci.customer_sk IS NULL
                    AND csci.customer_sk IS NOT NULL THEN 1
               ELSE 0
           END) catalog_only ,
       sum(CASE
               WHEN ssci.customer_sk IS NOT NULL
                    AND csci.customer_sk IS NOT NULL THEN 1
               ELSE 0
           END) store_and_catalog
FROM ssci
FULL OUTER JOIN csci ON (ssci.customer_sk=csci.customer_sk
                         AND ssci.item_sk = csci.item_sk)
OPTION (LABEL = &apos;q97&apos;)
						 </stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q98" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q98.sql--

SELECT i_item_desc,
       i_category,
       i_class,
       i_current_price ,
       sum(ss_ext_sales_price) AS itemrevenue ,
       sum(ss_ext_sales_price)*100/sum(sum(ss_ext_sales_price)) OVER (PARTITION BY i_class) AS revenueratio
FROM TPCDS.store_sales,
     TPCDS.item,
     TPCDS.date_dim
WHERE ss_item_sk = i_item_sk
  AND i_category IN (&apos;Sports&apos;,
                     &apos;Books&apos;,
                     &apos;Home&apos;)
  AND ss_sold_date_sk = d_date_sk
  AND d_date BETWEEN cast(&apos;1999-02-22&apos; AS date) AND (DATEADD(DAY, 30, cast(&apos;1999-02-22&apos; AS date)))
GROUP BY i_item_id,
         i_item_desc,
         i_category,
         i_class,
         i_current_price
ORDER BY i_category,
         i_class,
         i_item_id,
         i_item_desc,
         revenueratio
OPTION (LABEL = &apos;q98&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="q99" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">--q99.sql--

SELECT TOP 100 SUBSTRING(w_warehouse_name, 1, 20),
       sm_type,
       cc_name ,
       sum(CASE
               WHEN (cs_ship_date_sk - cs_sold_date_sk &lt;= 30) THEN 1
               ELSE 0
           END) AS [30 days] ,
       sum(CASE
               WHEN (cs_ship_date_sk - cs_sold_date_sk &gt; 30)
                    AND (cs_ship_date_sk - cs_sold_date_sk &lt;= 60) THEN 1
               ELSE 0
           END) AS [31-60 days] ,
       sum(CASE
               WHEN (cs_ship_date_sk - cs_sold_date_sk &gt; 60)
                    AND (cs_ship_date_sk - cs_sold_date_sk &lt;= 90) THEN 1
               ELSE 0
           END) AS [61-90 days] ,
       sum(CASE
               WHEN (cs_ship_date_sk - cs_sold_date_sk &gt; 90)
                    AND (cs_ship_date_sk - cs_sold_date_sk &lt;= 120) THEN 1
               ELSE 0
           END) AS [91-120 days] ,
       sum(CASE
               WHEN (cs_ship_date_sk - cs_sold_date_sk &gt; 120) THEN 1
               ELSE 0
           END) AS [&gt;120 days]
FROM TPCDS.catalog_sales,
     TPCDS.warehouse,
     TPCDS.ship_mode,
     TPCDS.call_center,
     TPCDS.date_dim
WHERE d_month_seq BETWEEN 1200 AND 1200 + 11
  AND cs_ship_date_sk = d_date_sk
  AND cs_warehouse_sk = w_warehouse_sk
  AND cs_ship_mode_sk = sm_ship_mode_sk
  AND cs_call_center_sk = cc_call_center_sk
GROUP BY SUBSTRING(w_warehouse_name, 1, 20),
         sm_type,
         cc_name
ORDER BY SUBSTRING(w_warehouse_name, 1, 20),
         sm_type,
         cc_name
OPTION (LABEL = &apos;q99&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="ss" enabled="true">
          <stringProp name="dataSource">synapsePool</stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="query">SELECT count(*) AS total,
       count(ss_sold_date_sk) AS not_null_total, --count(distinct ss_sold_date_sk) as unique_days,
 max(ss_sold_date_sk) AS max_ss_sold_date_sk,
 max(ss_sold_time_sk) AS max_ss_sold_time_sk,
 max(ss_item_sk) AS max_ss_item_sk,
 max(ss_customer_sk) AS max_ss_customer_sk,
 max(ss_cdemo_sk) AS max_ss_cdemo_sk,
 max(ss_hdemo_sk) AS max_ss_hdemo_sk,
 max(ss_addr_sk) AS max_ss_addr_sk,
 max(ss_store_sk) AS max_ss_store_sk,
 max(ss_promo_sk) AS max_ss_promo_sk
FROM TPCDS.store_sales
OPTION (LABEL = &apos;qSS&apos;)</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <stringProp name="resultVariable"></stringProp>
          <stringProp name="queryTimeout"></stringProp>
          <stringProp name="resultSetMaxRows"></stringProp>
          <stringProp name="resultSetHandler">Store as String</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
